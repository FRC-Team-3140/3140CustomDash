import Store from '@webbitjs/store';
import { WebbitConfig } from './element-config';
import Webbit from './webbit';
declare class WebbitConnector {
    #private;
    static UNIQUE_ID: number;
    constructor(rootElement: HTMLElement, store: Store, elementConfigs?: Record<string, Partial<WebbitConfig>>, group?: string);
    addElementConfigs(elementConfigs?: Record<string, Partial<WebbitConfig>>, group?: string): void;
    subscribeElementConnected(callback: (value: unknown) => void): void;
    subscribeElementDisconnected(callback: (value: unknown) => void): void;
    getRootElement(): HTMLElement;
    /**
     * Gets the element config with the most specific selector that matches the element
     * @param element
     * @returns The element config or undefined if none is found
     */
    getMatchingElementConfig(element: HTMLElement | undefined): WebbitConfig | undefined;
    /**
     * Gets the most specific selector that matches the element
     * @param element
     * @returns The selector or undefined if none is found
     */
    getMatchingElementSelector(element: HTMLElement | undefined): string | undefined;
    getElementConfigSelectors(): Array<string>;
    getElementConfig(selector: string): WebbitConfig | undefined;
    hasElementConfig(selector: string): boolean;
    setDefaultPropertyValue(element: HTMLElement, property: string, value: unknown): void;
    setSourceProvider(element: HTMLElement, sourceProvider: string): void;
    setSourceKey(element: HTMLElement, sourceKey: string): void;
    getDefaultPropertyValue(element: HTMLElement, property: string): unknown;
    getDefaultPropertyValues(element: HTMLElement): Record<string, unknown>;
    getSourceProvider(element: HTMLElement): string | undefined;
    getSourceKey(element: HTMLElement): string | undefined;
    getElementWebbit(element: HTMLElement): Webbit | undefined;
    hasElement(element: HTMLElement): boolean;
    getStore(): Store;
}
export default WebbitConnector;
