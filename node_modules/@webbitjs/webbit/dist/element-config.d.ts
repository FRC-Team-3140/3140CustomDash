import Store, { Source, SourceProvider } from '@webbitjs/store';
declare type TypeWithDefault = {
    type: 'String';
    defaultValue?: string;
} | {
    type: 'Boolean';
    defaultValue?: boolean;
} | {
    type: 'Number';
    defaultValue?: number;
} | {
    type: 'Array';
    defaultValue?: Array<unknown>;
} | {
    type: 'Object';
    defaultValue?: Record<string, unknown>;
} | {
    type: 'SourceProvider';
    defaultValue?: SourceProvider;
} | {
    type: 'Store';
    defaultValue?: Store;
} | {
    type: 'Source';
    defaultValue?: Source;
};
export declare type WebbitProperty = TypeWithDefault & {
    property?: string | null | false;
    description?: string;
    attribute?: string | null | false;
    reflect?: boolean;
    primary?: boolean;
    changeEvent?: string;
    input?: {
        type?: string;
        [option: string]: unknown;
    };
};
declare type PropertyMap = {
    [propertyName: string]: WebbitProperty;
};
declare type Slot = {
    name: string;
    description?: string;
    allowedChildren?: Array<string>;
};
export declare type WebbitConfig = {
    description: string;
    group: string;
    defaultSourceKey?: string;
    defaultSourceProvider?: string;
    dashboard: {
        topLevel?: boolean;
        displayName?: string | ((element?: HTMLElement) => string);
        defaultHtml?: string;
        onInit?: (element: HTMLElement) => void;
        layout?: {
            type?: string;
            resizable?: {
                vertical: boolean;
                horizontal: boolean;
            };
            movable?: boolean;
            size?: {
                minHeight?: number;
                minWidth?: number;
                maxHeight?: number;
                maxWidth?: number;
            };
        };
    };
    properties: PropertyMap;
    events: Array<Record<string, unknown>>;
    slots: Array<Slot>;
    cssProperties: Array<Record<string, unknown>>;
    cssParts: Array<Record<string, unknown>>;
};
export declare const normalizeConfig: ({ description, group, defaultSourceKey, defaultSourceProvider, dashboard, properties, events, slots, cssProperties, cssParts, ...args }?: Partial<WebbitConfig>) => WebbitConfig;
export {};
