declare class SourceProvider {
    #private;
    constructor(initialSources?: Record<string, unknown>, interval?: number);
    /**
     * Updates the value of a source in the store. If the source doesn't
     * exist then it is added. Should only be called internally by the
     * source provider.
     *
     * @protected
     * @param {string} key - The source's key. This is a string separated
     * by '/'.
     * @param {*} value - The new value.
     */
    updateSource(key: string, value: unknown): void;
    /**
     * Removes an existing source from the store. If the source
     * doesn't exist this does nothing. Should only be called
     * internally by the source provider.
     *
     * @protected
     * @param {string} key - The source's key. This is a string separated
     * by '/'.
     */
    removeSource(key: string): void;
    /**
     * Removes all sources in the store for this provider. Should only be
     * called internally by the source provider.
     *
     * @protected
     * @param {function} callback - An optional callback. Called when sources
     * have been cleared.
     */
    clearSources(callback?: () => void): void;
    /**
     * Removes all sources in the store for this provider after a period of time.
     * If a source is set or this function is called before that period of time
     * ends, sources will not be cleared. This is useful for preventing sources
     * from being cleared on an unreliable network. Should only be called internally
     * by the source provider.
     *
     * @protected
     * @param {number} timeout - The period of time before clearing the sources
     * in milliseconds.
     * @param {function} callback - An optional callback. Called when sources
     * have been cleared.
     */
    clearSourcesWithTimeout(timeout: number, callback: () => void): void;
    /**
     * Called when a source's value is modified by the user. This method
     * should be overridden by the child class to handle these updates.
     * This method should not be called directly.
     *
     * @protected
     * @param {string} key - The source's key. This is a string separated
     * by '/'.
     * @param {*} value - The source's updated value.
     */
    userUpdate(key: string, value: unknown): void;
    /**
     * This optional method is called when a key is subscribed to that the store does not
     * already have. A SourceProvider can override this method to update the store with
     * the requested source.
     * @Override
     * @param {string} key
     */
    requestSource(key: string): void;
    /**
     * Helper function to get the type of a variable represented
     * by a string.
     *
     * @param {*} value
     * @returns {string} - The value's type.
     */
    static getType(value: unknown): string | null;
    addClearSourcesHandler(handler: () => unknown): () => void;
    addSourcesChangedHandler(handler: (changes: Record<string, unknown>) => void): () => void;
    addSourcesRemovedHandler(handler: (removals: Array<string>) => void): () => void;
    disconnect(): void;
}
export default SourceProvider;
