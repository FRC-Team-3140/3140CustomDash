import { U as a, M as l, H as c, O as b } from "./property-C4BPH-wS-7fb0a59c.js";
var h = Object.defineProperty, i = (o, n, s, u) => {
  for (var t = void 0, r = o.length - 1, g; r >= 0; r--)
    (g = o[r]) && (t = g(n, s, t) || t);
  return t && h(n, s, t), t;
};
const d = class extends c {
  constructor() {
    super(...arguments), this.toggled = !1, this.disabled = !1, this.label = "Button";
  }
  onClick() {
    this.disabled || (this.toggled = !this.toggled, this.dispatchEvent(
      new CustomEvent("toggle", {
        detail: {
          toggled: this.toggled
        },
        bubbles: !0,
        composed: !0
      })
    ));
  }
  render() {
    return b`
      <button class="${this.toggled ? "toggled" : ""}" @click="${this.onClick}">
        ${this.label}
      </button>
    `;
  }
};
d.styles = a`
    :host {
      display: inline-block;
      width: 100px;
      height: 50px;
      font-family: sans-serif;
      font-size: 16px;
      letter-spacing: 0.5px;
    }

    button {
      width: 100%;
      height: 100%;
      margin: 0;
      border: none;
      border-radius: 4px;
      font-size: inherit;
      font-family: inherit;
      letter-spacing: inherit;
      background: var(--frc-button-background-color, rgb(230, 230, 230));
      color: var(--frc-button-text-color, black);
    }

    .toggled {
      background: var(--frc-button-toggled-background-color, black);
      color: var(--frc-button-toggled-text-color, white);
      font-weight: bold;
    }
  `;
let e = d;
i([
  l({ type: Boolean })
], e.prototype, "toggled");
i([
  l({ type: Boolean })
], e.prototype, "disabled");
i([
  l({ type: String })
], e.prototype, "label");
customElements.get("frc-toggle-button") || customElements.define("frc-toggle-button", e);
export {
  e
};
