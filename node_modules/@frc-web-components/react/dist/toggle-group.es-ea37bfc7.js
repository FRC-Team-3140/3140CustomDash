import { U as v, M as a, H as b, O as h } from "./property-C4BPH-wS-7fb0a59c.js";
var u = (e) => {
  throw TypeError(e);
}, m = (e, t, o) => t.has(e) || u("Cannot " + o), y = (e, t, o) => t.has(e) ? u("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(e) : t.set(e, o), p = (e, t, o) => (m(e, t, "access private method"), o), x = Object.defineProperty, l = (e, t, o, w) => {
  for (var i = void 0, s = e.length - 1, c; s >= 0; s--)
    (c = e[s]) && (i = c(t, o, i) || i);
  return i && x(t, o, i), i;
}, n, d, g;
const f = class extends b {
  constructor() {
    super(...arguments), y(this, n), this.options = ["On", "Off"], this.value = "", this.direction = "vertical";
  }
  async setValue(t) {
    this.value = t;
  }
  updated(t) {
    t.has("options") && !this.options.includes(this.value) && (this.value = this.options[0] ?? ""), t.has("value") && p(this, n, d).call(this), t.has("options") && p(this, n, g).call(this), t.has("direction") && this.style.setProperty(
      "flex-direction",
      this.direction === "vertical" ? "column" : "row"
    );
  }
  render() {
    return h`
      ${this.options.map(
      (t) => h`
          <button
            class="${this.value === t ? "toggled" : ""}"
            @click="${() => this.setValue(t)}"
          >
            ${t}
          </button>
        `
    )}
    `;
  }
};
n = /* @__PURE__ */ new WeakSet(), d = function() {
  this.dispatchEvent(
    new CustomEvent("change", {
      detail: { value: this.value },
      bubbles: !0,
      composed: !0
    })
  );
}, g = function() {
  this.dispatchEvent(
    new CustomEvent("optionsUpdate", {
      detail: { options: this.options },
      bubbles: !0,
      composed: !0
    })
  );
}, f.styles = v`
    :host {
      display: inline-flex;
      flex-direction: column;
      width: 150px;
      height: 300px;
      gap: 0;
      font-family: sans-serif;
      font-size: 16px;
      letter-spacing: 0.5px;
    }

    button {
      width: 100%;
      height: 100%;
      margin: 0;
      border: none;
      font-size: inherit;
      font-family: inherit;
      letter-spacing: inherit;
      background: var(--frc-button-background-color, rgb(230, 230, 230));
      color: var(--frc-button-text-color, black);
      flex: 1;
    }

    .toggled {
      background: var(--frc-button-toggled-background-color, black);
      color: var(--frc-button-toggled-text-color, white);
      font-weight: bold;
    }

    [part='button'] {
      border-radius: 0;
      margin: 0;
      flex: 1;
      font-size: inherit;
      height: 100%;
      padding: 0;
    }
  `;
let r = f;
l([
  a({ type: Array })
], r.prototype, "options");
l([
  a({ type: String })
], r.prototype, "value");
l([
  a({ type: String })
], r.prototype, "direction");
customElements.get("frc-toggle-group") || customElements.define("frc-toggle-group", r);
export {
  r
};
