import { v as l } from "./property-C4BPH-wS-7fb0a59c.js";
import { T as u, _ as c, s as d } from "./directive-B76A7YXI-abc0af54.js";
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const i = "important", f = " !" + i, h = u(class extends c {
  constructor(s) {
    var e;
    if (super(s), s.type !== d.ATTRIBUTE || s.name !== "style" || ((e = s.strings) == null ? void 0 : e.length) > 2)
      throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.");
  }
  render(s) {
    return Object.keys(s).reduce((e, r) => {
      const t = s[r];
      return t == null ? e : e + `${r = r.includes("-") ? r : r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, "-$&").toLowerCase()}:${t};`;
    }, "");
  }
  update(s, [e]) {
    const { style: r } = s.element;
    if (this.ft === void 0)
      return this.ft = new Set(Object.keys(e)), this.render(e);
    for (const t of this.ft)
      e[t] == null && (this.ft.delete(t), t.includes("-") ? r.removeProperty(t) : r[t] = null);
    for (const t in e) {
      const n = e[t];
      if (n != null) {
        this.ft.add(t);
        const o = typeof n == "string" && n.endsWith(f);
        t.includes("-") || o ? r.setProperty(t, o ? n.slice(0, -11) : n, o ? i : "") : r[t] = n;
      }
    }
    return l;
  }
});
export {
  h as p
};
