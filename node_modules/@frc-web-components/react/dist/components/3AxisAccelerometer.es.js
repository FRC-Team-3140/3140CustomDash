import l from "react";
import { U as h, M as t, H as u, O as p, o as d } from "../property-C4BPH-wS-7fb0a59c.js";
import "../accelerometer.es-1e0be328.js";
import "../bar.es-bc02d3c5.js";
import "../axis.es-29b40501.js";
import "../number-bar.es-14bfc169.js";
import "../state-Cn3aen3G-6b8e5a08.js";
import "../query-BrpQj_Qi-db00b239.js";
import "../transform-DR-Bw75L-3629b551.js";
var x = Object.defineProperty, r = (m, i, c, y) => {
  for (var o = void 0, a = m.length - 1, s; a >= 0; a--)
    (s = m[a]) && (o = s(i, c, o) || o);
  return o && x(i, c, o), o;
};
const n = class extends u {
  constructor() {
    super(...arguments), this.x = 0, this.y = 0, this.z = 0, this.min = -1, this.max = 1, this.center = 0, this.precision = 2, this.hideText = !1, this.numTickMarks = 3, this.unit = "g";
  }
  renderAccelerometer(i, c) {
    return p`
      <div part="accelerometer">
        <label part="label">${i}</label>
        <frc-accelerometer
          part="${i}"
          value="${this[i] || 0}"
          min="${this.min}"
          max="${this.max}"
          center="${this.center}"
          precision="${this.precision}"
          ?hide-text="${this.hideText}"
          num-tick-marks="${c}"
          unit="${this.unit}"
        ></frc-accelerometer>
      </div>
    `;
  }
  render() {
    return p`
      ${this.renderAccelerometer("x", 0)} ${this.renderAccelerometer("y", 0)}
      ${this.renderAccelerometer("z", this.numTickMarks)}
    `;
  }
};
n.styles = h`
    :host {
      display: inline-flex;
      flex-direction: column;
      height: auto;
      font-family: sans-serif;
      width: 300px;
    }

    [part='accelerometer'] {
      width: 100%;
      display: flex;
      gap: 8px;
      align-items: center;
      margin-bottom: 10px;
    }

    [part='accelerometer']:last-child {
      margin-bottom: 0;
    }

    [part='accelerometer'] label {
      width: 10px;
      padding-top: 2px;
      font-weight: bold;
      text-transform: uppercase;
      color: var(--frc-3-axis-accelerometer-label-color, #000);
    }

    frc-accelerometer {
      width: 100%;
      flex: 1;
    }

    frc-accelerometer::part(bar) {
      width: 100%;
      margin: 0;
    }
  `;
let e = n;
r([
  t({ type: Number })
], e.prototype, "x");
r([
  t({ type: Number })
], e.prototype, "y");
r([
  t({ type: Number })
], e.prototype, "z");
r([
  t({ type: Number })
], e.prototype, "min");
r([
  t({ type: Number })
], e.prototype, "max");
r([
  t({ type: Number })
], e.prototype, "center");
r([
  t({ type: Number })
], e.prototype, "precision");
r([
  t({ type: Boolean, attribute: "hide-text" })
], e.prototype, "hideText");
r([
  t({ type: Number, attribute: "num-tick-marks" })
], e.prototype, "numTickMarks");
r([
  t({ type: String })
], e.prototype, "unit");
customElements.get("frc-3-axis-accelerometer") || customElements.define("frc-3-axis-accelerometer", e);
const M = d({
  tagName: "frc-3-axis-accelerometer",
  elementClass: e,
  react: l
});
export {
  M as ThreeAxisAccelerometer,
  M as default
};
