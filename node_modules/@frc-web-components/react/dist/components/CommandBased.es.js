import u from "react";
import { U as g, M as r, H as b, O as c, o as f } from "../property-C4BPH-wS-7fb0a59c.js";
import "../toggle-button.es-37c936c3.js";
var y = (t) => {
  throw TypeError(t);
}, $ = (t, e, a) => e.has(t) || y("Cannot " + a), w = (t, e, a) => e.has(t) ? y("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, a), E = (t, e, a) => ($(t, e, "access private method"), a), B = Object.defineProperty, h = (t, e, a, S) => {
  for (var o = void 0, s = t.length - 1, m; s >= 0; s--)
    (m = t[s]) && (o = m(e, a, o) || o);
  return o && B(e, a, o), o;
}, d, v;
const x = class extends b {
  constructor() {
    super(...arguments), w(this, d), this.name = "Command", this.running = !1, this.controllable = !1, this.label = "";
  }
  render() {
    return c`
      <frc-toggle-button
        ?disabled="${!this.controllable}"
        ?toggled="${this.running}"
        label=${this.label || this.name}
        @toggle="${E(this, d, v)}"
      >
      </frc-toggle-button>
    `;
  }
};
d = /* @__PURE__ */ new WeakSet(), v = function(t) {
  t.stopPropagation(), this.running = !this.running, this.dispatchEvent(
    new CustomEvent("toggle", {
      detail: {
        running: this.running
      },
      bubbles: !0,
      composed: !0
    })
  );
}, x.styles = g`
    :host {
      display: inline-block;
      width: 100px;
      height: 50px;
      font-family: sans-serif;
      font-size: 16px;
      letter-spacing: 0.5px;
    }

    frc-toggle-button {
      width: 100%;
      height: 100%;
    }
  `;
let l = x;
h([
  r({ type: String })
], l.prototype, "name");
h([
  r({ type: Boolean })
], l.prototype, "running");
h([
  r({ type: Boolean })
], l.prototype, "controllable");
h([
  r({ type: String })
], l.prototype, "label");
customElements.get("frc-robot-command") || customElements.define("frc-robot-command", l);
var N = Object.defineProperty, i = (t, e, a, S) => {
  for (var o = void 0, s = t.length - 1, m; s >= 0; s--)
    (m = t[s]) && (o = m(e, a, o) || o);
  return o && N(e, a, o), o;
}, p;
const n = (p = class extends b {
  constructor() {
    super(...arguments), this.default = "", this.command = "", this.hasCommand = !1, this.hasDefault = !1, this.label = "", this.name = "", this.hideName = !1;
  }
  static renderValue(t, e) {
    return e ? c`<span class="has-value">${t}</span>` : c`<span class="no-value">None</span>`;
  }
  render() {
    return c`
      ${this.hideName ? "" : c` <header>${this.label || this.name}</header> `}
      <div class="subsystem">
        <p>
          Default command:
          ${p.renderValue(this.default, this.hasDefault)}
        </p>
        <p>
          Current command:
          ${p.renderValue(this.command, this.hasCommand)}
        </p>
      </div>
    `;
  }
}, p.styles = g`
    :host {
      display: inline-block;
      font-family: sans-serif;
      font-size: 16px;
      padding: 5px;
      color: var(--frc-label-text-color, black);
    }

    .subsystem {
      display: flex;
      flex-direction: column;
      flex-wrap: wrap;
    }

    p {
      margin: 0;
      margin-right: 10px;
      margin-top: 5px;
    }

    header {
      font-weight: bold;
      margin-bottom: 2px;
      color: var(--frc-robot-subsystem-header-color, purple);
    }

    .has-value {
      color: green;
    }

    .no-value {
      color: red;
    }
  `, p);
i([
  r({ type: String })
], n.prototype, "default");
i([
  r({ type: String })
], n.prototype, "command");
i([
  r({ type: Boolean, attribute: "has-command" })
], n.prototype, "hasCommand");
i([
  r({ type: Boolean, attribute: "has-default" })
], n.prototype, "hasDefault");
i([
  r({ type: String })
], n.prototype, "label");
i([
  r({ type: String })
], n.prototype, "name");
i([
  r({ type: Boolean, attribute: "hide-name" })
], n.prototype, "hideName");
let C = n;
customElements.get("frc-robot-subsystem") || customElements.define("frc-robot-subsystem", C);
const R = f({
  tagName: "frc-robot-command",
  elementClass: l,
  react: u,
  events: {
    ontoggle: "toggle"
  }
}), V = f({
  tagName: "frc-robot-subsystem",
  elementClass: C,
  react: u
});
export {
  R as RobotCommand,
  V as RobotSubsystem
};
