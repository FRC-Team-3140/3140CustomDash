import E from "react";
import { U as g, M as r, H as m, O as p, o as O } from "../property-C4BPH-wS-7fb0a59c.js";
import { h as P } from "../query-BrpQj_Qi-db00b239.js";
import "../icon-Dc8f99z4-878f257b.js";
var v = (t) => {
  throw TypeError(t);
}, A = (t, e, o) => e.has(t) || v("Cannot " + o), x = (t, e, o) => e.has(t) ? v("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, o), f = (t, e, o) => (A(t, e, "access private method"), o), j = Object.defineProperty, d = (t, e, o, h) => {
  for (var s = void 0, i = t.length - 1, l; i >= 0; i--)
    (l = t[i]) && (s = l(e, o, s) || s);
  return s && j(e, o, s), s;
}, b, $;
const S = class extends m {
  constructor() {
    super(...arguments), x(this, b), this.options = [], this.selected = "", this.default = "", this.active = "", this.label = "Auto Choices";
  }
  onChange() {
    this.selected = this.selectElement.value, f(this, b, $).call(this);
  }
  render() {
    return p`
      <div class="container">
        ${this.label ? p` <p>${this.label}</p> ` : ""}
        <div class="input-container">
          <label>
            <select @change=${this.onChange} .value=${this.selected}>
              ${this.options.map(
      (e) => p`
                  <option value=${e} ?selected=${this.selected === e}>
                    ${e}
                  </option>
                `
    )}
            </select>
          </label>
          ${this.options.length > 0 ? p`
                ${this.selected === this.active ? p`<frc-icon icon="check" color="green"></frc-icon>` : p`<frc-icon icon="close" color="red"></frc-icon>`}
              ` : ""}
        </div>
      </div>
    `;
  }
};
b = /* @__PURE__ */ new WeakSet(), $ = function() {
  this.dispatchEvent(
    new CustomEvent("change", {
      detail: { selected: this.selected },
      bubbles: !0,
      composed: !0
    })
  );
}, S.styles = g`
    :host {
      display: inline-block;
      min-width: 220px;
      font-family: sans-serif;
    }

    .input-container {
      display: flex;
      align-items: flex-end;
      gap: 7px;
      width: 100%;
    }

    frc-icon {
      width: 20px;
      height: 20px;
      margin-bottom: 12px;
    }

    label {
      position: relative;
      display: inline-block;
      width: 100%;
    }

    label:after {
      content: ' ';
      position: absolute;
      right: 15px;
      top: 46%;
      margin-top: -3px;
      z-index: 2;
      pointer-events: none;
      width: 0;
      height: 0;
      border-style: solid;
      border-width: 6.9px 4px 0 4px;
      border-color: #aaa transparent transparent transparent;
      pointer-events: none;
    }

    select {
      width: 100%;
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
      outline: 0 none;

      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      padding: 0 30px 0 10px;

      border: 1px solid #e0e0e0;
      border-radius: 3px;
      line-height: 36px;
      height: 36px;
      background: #fff;
      margin: 0 5px 5px 0;
    }

    p {
      color: var(--frc-sendable-chooser-label-color, black);
      margin: 0;
      font-size: 13px;
      padding-left: 3px;
    }

    .container {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }
  `;
let c = S;
d([
  r({ type: Array })
], c.prototype, "options");
d([
  r({ type: String, reflect: !0 })
], c.prototype, "selected");
d([
  r({ type: String })
], c.prototype, "default");
d([
  r({ type: String })
], c.prototype, "active");
d([
  r({ type: String, reflect: !0 })
], c.prototype, "label");
d([
  P("select", !0)
], c.prototype, "selectElement");
customElements.get("frc-sendable-chooser") || customElements.define("frc-sendable-chooser", c);
var K = Object.defineProperty, a = (t, e, o, h) => {
  for (var s = void 0, i = t.length - 1, l; i >= 0; i--)
    (l = t[i]) && (s = l(e, o, s) || s);
  return s && K(e, o, s), s;
}, u, y, w;
const k = class extends m {
  constructor() {
    super(...arguments), x(this, u), this.options = [], this.selected = "", this.default = "", this.active = "", this.label = "Auto Choices", this.sourceProvider = "", this.sourceKey = "";
  }
  updated(e) {
    e.has("default") && (this.options.includes(this.selected) || f(this, u, y).call(this));
  }
  render() {
    return p`
      <frc-sendable-chooser
        @change=${f(this, u, w)}
        .options=${this.options}
        .selected=${this.selected}
        .default=${this.default}
        .active=${this.active}
        .label=${this.label}
      ></frc-sendable-chooser>
    `;
  }
};
u = /* @__PURE__ */ new WeakSet(), y = function() {
  const {
    provider: t,
    store: e,
    sourceProvider: o,
    sourceKey: h,
    default: s
  } = this;
  if (!t || !e || !o || !h)
    return;
  const i = e.getSource(o, h), l = e.getSource(
    o,
    `${h}/selected`
  );
  if (i != null && i.hasChildren() && !(l != null && l.hasValue())) {
    const C = this.options.includes(this.selected) ? this.selected : s;
    t.userUpdate(`${h}/selected`, C);
  }
}, w = function(t) {
  this.selected = t.detail.selected, f(this, u, y).call(this);
}, k.styles = g`
    :host {
      display: inline-block;
      min-width: 220px;
      font-family: sans-serif;
    }

    frc-sendable-chooser {
      width: 100%;
      height: 100%;
    }
  `;
let n = k;
a([
  r({ type: Array })
], n.prototype, "options");
a([
  r({ type: String, reflect: !0 })
], n.prototype, "selected");
a([
  r({ type: String })
], n.prototype, "default");
a([
  r({ type: String })
], n.prototype, "active");
a([
  r({ type: String, reflect: !0 })
], n.prototype, "label");
a([
  r({ type: Object, attribute: !1 })
], n.prototype, "provider");
a([
  r({ type: Object, attribute: !1 })
], n.prototype, "store");
a([
  r({ type: String, attribute: "source-provider" })
], n.prototype, "sourceProvider");
a([
  r({ type: String, attribute: "source-key" })
], n.prototype, "sourceKey");
customElements.get("frc-sendable-chooser-wrapper") || customElements.define("frc-sendable-chooser-wrapper", n);
const N = O({
  tagName: "frc-sendable-chooser",
  elementClass: c,
  react: E,
  events: {
    onchange: "change"
  }
});
export {
  N as SendableChooser,
  N as default
};
