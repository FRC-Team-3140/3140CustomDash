import W from "react";
import { U as E, M as p, H as C, O as h, o as M } from "../property-C4BPH-wS-7fb0a59c.js";
import { o as B } from "../when-CDK1Tt5Y-835602a5.js";
var z = (t) => {
  throw TypeError(t);
}, $ = (t, e, r) => e.has(t) || z("Cannot " + r), m = (t, e, r) => ($(t, e, "read from private field"), r ? r.call(t) : e.get(t)), y = (t, e, r) => e.has(t) ? z("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, r), k = (t, e, r, o) => ($(t, e, "write to private field"), o ? o.call(t, r) : e.set(t, r), r), n = (t, e, r) => ($(t, e, "access private method"), r), q = Object.defineProperty, x = (t, e, r, o) => {
  for (var i = void 0, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = a(e, r, i) || i);
  return i && q(e, r, i), i;
}, c, j, S, d, w;
const O = class extends C {
  constructor() {
    super(...arguments), y(this, c), this.sourceRoot = "", this.preferences = {}, this.search = "", this.hideTitle = !1;
  }
  render() {
    return h`
      <div class="container">
        ${B(!this.hideTitle, () => h` <header>Preferences</header> `)}

        <div class="search-input">
          <input
            placeholder="Search..."
            .value=${this.search}
            @input=${(e) => {
      this.search = e.target.value, n(this, c, S).call(this);
    }}
          />
        </div>
        <div class="preferences-container">
          <div class="preferences">${n(this, c, w).call(this, this.preferences)}</div>
        </div>
      </div>
    `;
  }
};
c = /* @__PURE__ */ new WeakSet(), j = function(t, e) {
  this.dispatchEvent(
    new CustomEvent("change", {
      detail: {
        property: t,
        value: e
      },
      bubbles: !0,
      composed: !0
    })
  );
}, S = function() {
  this.dispatchEvent(
    new CustomEvent("search", {
      detail: {
        search: this.search
      },
      bubbles: !0,
      composed: !0
    })
  );
}, d = function(t, e, r, o) {
  r[o] = e, n(this, c, j).call(this, t, e), this.requestUpdate();
}, w = function(t, e) {
  const r = Object.entries(t).filter(
    ([o, i]) => {
      const s = typeof e < "u" ? [e, o].join("/") : o;
      return o.startsWith(".") ? !1 : !this.search || typeof i == "object" ? !0 : s.toLowerCase().includes(this.search.toLowerCase());
    }
  );
  return h`
      ${r.map(([o, i]) => {
    const s = typeof e < "u" ? [e, o].join("/") : o;
    return typeof i == "boolean" ? h`
            <label title=${s}>${s}</label>
            <input
              type="checkbox"
              .checked=${i}
              @change=${(a) => {
      n(this, c, d).call(this, s, a.target.checked, t, o);
    }}
            />
          ` : typeof i == "number" ? h`
            <label title=${s}>${s}</label>
            <div class="number-input">
              <button
                @click=${() => {
      n(this, c, d).call(this, s, i - 1, t, o);
    }}
              >
                -
              </button>
              <input
                type="number"
                .value=${i}
                @change=${(a) => {
      n(this, c, d).call(this, s, parseFloat(a.target.value), t, o);
    }}
              />
              <button
                @click=${() => {
      n(this, c, d).call(this, s, i + 1, t, o);
    }}
              >
                +
              </button>
            </div>
          ` : typeof i == "string" ? h`
            <label title=${s}>${s}</label>
            <input
              type="text"
              .value=${i}
              @change=${(a) => {
      n(this, c, d).call(this, s, a.target.value, t, o);
    }}
            />
          ` : n(this, c, w).call(this, i, s);
  })}
    `;
}, O.styles = E`
    :host {
      display: inline-block;
      width: 250px;
      height: 250px;
      font-family: sans-serif;
    }

    .container {
      display: flex;
      flex-direction: column;
      gap: 3px;
      height: 100%;
      width: 100%;
    }

    header {
      background: var(--frc-preferences-header-background-color, lightblue);
      color: var(--frc-preferences-label-color, black);
      text-align: center;
      padding: 5px 3px;
      border-radius: 3px;
      margin: 0 3px;
      font-size: 15px;
    }

    .search-input {
      padding: 0 3px;
    }

    .preferences-container {
      flex: 1;
      overflow: auto;
      width: 100%;
      box-sizing: border-box;

      .preferences {
        padding: 3px;
        display: inline-grid;
        grid-template-columns: repeat(2, 1fr);
        column-gap: 8px;
        row-gap: 5px;
        align-items: center;
        justify-items: start;
        font-family: sans-serif;
        box-sizing: border-box;
      }
    }

    input::placeholder {
      color: var(--frc-preferences-placeholder-text-color, #888);
    }

    input:not([type='checkbox']) {
      width: 100%;
      border: none;
      outline: none;
      padding: 2px 4px;
      box-sizing: border-box;
      border-radius: 2px;
    }

    input[type='checkbox'] {
      width: 20px;
      height: 20px;
      appearance: none;
      -webkit-appearance: none;
      display: flex;
      align-content: center;
      justify-content: center;
      font-size: 2rem;
      padding: 0.1rem;
      border-radius: 3px;
    }

    input[type='checkbox']::before {
      content: ' ';
      /* https://yoksel.github.io/url-encoder/ */
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' height='24' viewBox='0 -960 960 960' width='24' style='&%2310; fill: white;&%2310;'%3E%3Cpath d='M382-218 130-470l75-75 177 177 375-375 75 75-450 450Z'/%3E%3C/svg%3E");
      width: 100%;
      background-size: 100% 100%;
      width: 100%;
      height: 100%;
      transform-origin: bottom left;
      transform: scale(0);
    }

    input[type='checkbox']:checked::before {
      transform: scale(1);
    }

    input[type='checkbox']:checked {
      background: #0c6ce9;
    }

    input {
      margin: 0;
      box-sizing: border-box;
      color: var(--frc-preferences-input-text-color, black);
      background: var(
        --frc-preferences-input-background-color,
        rgba(0, 0, 0, 0.1)
      );
    }

    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    /* Firefox */
    input[type='number'] {
      -moz-appearance: textfield;
    }

    .number-input {
      display: flex;
      background: var(
        --frc-preferences-input-background-color,
        rgba(0, 0, 0, 0.1)
      );
      box-sizing: border-box;
      height: 20px;
      border-radius: 2px;

      button {
        padding: 0;
        height: 100%;
        width: 20px;
        border: none;
        cursor: pointer;
        background: none;
        line-height: 20px;
        font-size: 15px;
        color: var(--frc-preferences-input-button-text-color, #444);
      }

      input {
        flex: 1;
        background: none;
        text-align: center;
      }
    }

    label {
      color: var(--frc-preferences-label-color, black);
      text-overflow: ellipsis;
      overflow: hidden;
      white-space: nowrap;
      width: 100%;
    }
  `;
let b = O;
x([
  p({ type: String, attribute: "source-root" })
], b.prototype, "sourceRoot");
x([
  p({ type: Object })
], b.prototype, "preferences");
x([
  p({ type: String })
], b.prototype, "search");
x([
  p({ type: Boolean, attribute: "hide-title" })
], b.prototype, "hideTitle");
customElements.get("frc-preferences") || customElements.define("frc-preferences", b);
var R = Object.defineProperty, u = (t, e, r, o) => {
  for (var i = void 0, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = a(e, r, i) || i);
  return i && R(e, r, i), i;
}, g, v, f, P, T, K;
const U = class extends C {
  constructor() {
    super(...arguments), y(this, f), y(this, g), y(this, v), this.search = "", this.hideTitle = !1, this.sourceKey = "", this.sourceProvider = "", k(this, g, {});
  }
  updated(e) {
    (e.has("sourceProvider") || e.has("sourceKey") || e.has("store")) && n(this, f, K).call(this);
  }
  disconnectedCallback() {
    var e;
    super.disconnectedCallback(), (e = m(this, v)) == null || e.call(this);
  }
  render() {
    return h`
      <frc-preferences
        @change=${(e) => n(this, f, P).call(this, e)}
        @search=${(e) => n(this, f, T).call(this, e)}
        source-root=${this.sourceKey}
        search=${this.search}
        ?hide-title=${this.hideTitle}
        .preferences=${m(this, g)}
      ></frc-preferences>
    `;
  }
};
g = /* @__PURE__ */ new WeakMap(), v = /* @__PURE__ */ new WeakMap(), f = /* @__PURE__ */ new WeakSet(), P = function(t) {
  var e;
  const { property: r, value: o } = t.detail;
  (e = this.provider) == null || e.userUpdate([this.sourceKey, r].join("/"), o);
}, T = function(t) {
  const { search: e } = t.detail;
  this.search = e;
}, K = function() {
  var t, e;
  (t = m(this, v)) == null || t.call(this), k(this, v, (e = this.store) == null ? void 0 : e.subscribe(
    this.sourceProvider,
    this.sourceKey,
    () => {
      var r;
      const o = (r = this.store) == null ? void 0 : r.getSource(
        this.sourceProvider,
        this.sourceKey
      );
      k(this, g, (o == null ? void 0 : o.getJson(!1)) ?? {}), this.requestUpdate();
    },
    !0
  ));
}, U.styles = E`
    :host {
      display: inline-block;
      width: 250px;
      height: 250px;
    }

    frc-preferences {
      width: 100%;
      height: 100%;
    }
  `;
let l = U;
u([
  p({ type: String })
], l.prototype, "search");
u([
  p({ type: Boolean, attribute: "hide-title" })
], l.prototype, "hideTitle");
u([
  p({ type: String, attribute: "source-key" })
], l.prototype, "sourceKey");
u([
  p({ type: String, attribute: "source-provider" })
], l.prototype, "sourceProvider");
u([
  p({ type: Object })
], l.prototype, "source");
u([
  p({ type: Object, attribute: !1 })
], l.prototype, "provider");
u([
  p({ type: Object, attribute: !1 })
], l.prototype, "store");
customElements.get("frc-preferences-wrapper") || customElements.define("frc-preferences-wrapper", l);
const Z = M({
  tagName: "frc-preferences",
  elementClass: b,
  react: W,
  events: {
    onchange: "change",
    onsearch: "search"
  }
});
export {
  Z as Preferences,
  Z as default
};
