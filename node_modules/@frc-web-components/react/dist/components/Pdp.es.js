import h from "react";
import { U as d, M as c, H as g, O as a, o as b } from "../property-C4BPH-wS-7fb0a59c.js";
import "../number-bar.es-14bfc169.js";
import "../voltage-view.es-704afd49.js";
import "../bar.es-bc02d3c5.js";
import "../state-Cn3aen3G-6b8e5a08.js";
import "../query-BrpQj_Qi-db00b239.js";
import "../axis.es-29b40501.js";
import "../transform-DR-Bw75L-3629b551.js";
var f = Object.defineProperty, s = (r, t, l, o) => {
  for (var e = void 0, p = r.length - 1, u; p >= 0; p--)
    (u = r[p]) && (e = u(t, l, e) || e);
  return e && f(t, l, e), e;
};
function i(r, t) {
  const l = [];
  for (let o = r; o < t; o += 1)
    l.push(o);
  return l;
}
const m = class extends g {
  constructor() {
    super(...arguments), this.voltage = 0, this.totalCurrent = 0, this.channels = Array(16).fill(0);
  }
  renderChannel(t) {
    return a`
      <frc-number-bar
        class="channel"
        part="channel"
        value=${this.channels[t] ?? 0}
        min="0"
        max="40"
        center="0"
        precision="2"
        ?hide-text="${!1}"
        num-tick-marks="0"
        unit="A"
      ></frc-number-bar>
    `;
  }
  render() {
    return a`
      <div part="channels">
        ${i(0, 8).map(
      (t) => a`
            <label part="channel-label">
              <slot name="${`channel-label${t}`}">Ch. ${t}</slot>
            </label>
          `
    )}
        ${i(0, 8).map((t) => a` ${this.renderChannel(t)} `)}
        ${i(8, 16).map(
      (t) => a`
            <label part="channel-label">
              <slot name="${`channel-label${t}`}">Ch. ${t}</slot>
            </label>
          `
    )}
        ${i(8, 16).map(
      (t) => a` ${this.renderChannel(t)} `
    )}
      </div>
      <div part="voltage-and-total-current">
        <label part="voltage-label">
          <slot name="voltage-label">Voltage</slot>
        </label>
        <label part="total-current-label">
          <slot name="total-current">Total Current</slot>
        </label>
        <frc-voltage-view
          class="voltage"
          part="voltage"
          value="${this.voltage}"
          min="0"
          max="15"
          center="0"
          precision="2"
          ?hide-text="${!1}"
          num-tick-marks="0"
        ></frc-voltage-view>
        <frc-number-bar
          class="total-current"
          part="total-current"
          value="${this.totalCurrent}"
          min="0"
          max="500"
          center="0"
          precision="2"
          ?hide-text="${!1}"
          num-tick-marks="0"
          unit="A"
        ></frc-number-bar>
      </div>
    `;
  }
};
m.styles = d`
    :host {
      display: inline-block;
      width: 350px;
      margin: 5px;
      color: var(--frc-label-text-color, black);
      font-family: sans-serif;
      font-size: 16px;
    }

    [part='channels'] {
      display: grid;
      grid-auto-flow: column;
      grid-template-columns: min-content 1fr min-content 1fr;
      grid-template-rows: auto auto auto auto auto auto auto auto;
      width: 100%;
      height: auto;
      align-items: center;
      gap: 3px;
    }

    .channel,
    .voltage,
    .total-current {
      width: auto;
    }

    [part='channel-label'] {
      padding-left: 5px;
      text-align: right;
      white-space: nowrap;
    }

    [part='voltage-and-total-current'] {
      margin-top: 5px;
      display: grid;
      grid-auto-flow: column;
      grid-template-columns: min-content auto;
      grid-template-rows: auto auto;
      column-gap: 10px;
      width: 100%;
      height: auto;
      align-items: center;
      gap: 3px;
    }

    [part='voltage-and-total-current'] {
      white-space: nowrap;
    }
  `;
let n = m;
s([
  c({ type: Number })
], n.prototype, "voltage");
s([
  c({ type: Number, attribute: "total-current" })
], n.prototype, "totalCurrent");
s([
  c({ type: Array })
], n.prototype, "channels");
customElements.get("frc-pdp") || customElements.define("frc-pdp", n);
const E = b({
  tagName: "frc-pdp",
  elementClass: n,
  react: h
});
export {
  E as Pdp,
  E as default
};
