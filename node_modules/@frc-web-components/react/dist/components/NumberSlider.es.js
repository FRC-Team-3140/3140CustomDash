import u from "react";
import { U as v, M as s, H as b, O as x, o as g } from "../property-C4BPH-wS-7fb0a59c.js";
var h = (t) => {
  throw TypeError(t);
}, f = (t, e, a) => e.has(t) || h("Cannot " + a), y = (t, e, a) => e.has(t) ? h("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, a), k = (t, e, a) => (f(t, e, "access private method"), a), w = Object.defineProperty, i = (t, e, a, m) => {
  for (var r = void 0, o = t.length - 1, c; o >= 0; o--)
    (c = t[o]) && (r = c(e, a, r) || r);
  return r && w(e, a, r), r;
}, l, d;
const p = class extends b {
  constructor() {
    super(...arguments), y(this, l), this.value = 0, this.min = -1, this.max = 1, this.blockIncrement = 0.05;
  }
  onChange(e) {
    this.value = parseFloat(e.target.value), k(this, l, d).call(this);
  }
  firstUpdated() {
    setTimeout(() => {
      const e = this.renderRoot.querySelector("#slider");
      e && (e.value = this.value);
    });
  }
  render() {
    const e = Math.min(this.min, this.max), a = Math.max(this.min, this.max), m = Math.max(e, Math.min(this.value, a));
    return x`
      <div class="slider-container">
        <input
          id="slider"
          type="range"
          .value="${m.toString()}"
          min="${e}"
          max="${a}"
          step="${this.blockIncrement}"
          @change="${this.onChange}"
        />

        <frc-axis ticks="5" min=${e} max=${a}></frc-axis>
      </div>
    `;
  }
};
l = /* @__PURE__ */ new WeakSet(), d = function() {
  this.dispatchEvent(
    new CustomEvent("change", {
      detail: { value: this.value },
      bubbles: !0,
      composed: !0
    })
  );
}, p.styles = v`
    :host {
      display: inline-block;
      height: 50px;
      width: 300px;
    }

    .slider-container {
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 0 15px;
    }

    input {
      width: 100%;
    }

    table-axis {
      width: calc(85% - 14px);
      max-width: calc(100% - 74px);
      display: block;
    }
  `;
let n = p;
i([
  s({ type: Number })
], n.prototype, "value");
i([
  s({ type: Number })
], n.prototype, "min");
i([
  s({ type: Number })
], n.prototype, "max");
i([
  s({ type: Number, attribute: "block-increment" })
], n.prototype, "blockIncrement");
customElements.get("frc-number-slider") || customElements.define("frc-number-slider", n);
const N = g({
  tagName: "frc-number-slider",
  elementClass: n,
  react: u,
  events: {
    onchange: "change"
  }
});
export {
  N as NumberSlider,
  N as default
};
