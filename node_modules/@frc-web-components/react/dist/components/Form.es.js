import S from "react";
import { U as b, M as a, H as v, O as p, o as C } from "../property-C4BPH-wS-7fb0a59c.js";
import { h as w } from "../query-BrpQj_Qi-db00b239.js";
var m = (t) => {
  throw TypeError(t);
}, O = (t, e, s) => e.has(t) || m("Cannot " + s), y = (t, e, s) => e.has(t) ? m("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, s), g = (t, e, s) => (O(t, e, "access private method"), s), A = Object.defineProperty, n = (t, e, s, E) => {
  for (var o = void 0, r = t.length - 1, l; r >= 0; r--)
    (l = t[r]) && (o = l(e, s, o) || o);
  return o && A(e, s, o), o;
}, h, f;
const $ = class extends v {
  constructor() {
    super(...arguments), y(this, h), this.disabled = !1, this.label = "", this.options = [], this.selected = [], this.direction = "vertical";
  }
  render() {
    return p`
      <vaadin-checkbox-group
        .disabled=${this.disabled}
        .label=${this.label}
        theme=${this.direction}
        .value=${this.selected}
      >
        ${this.options.map(
      (e) => p`
            <vaadin-checkbox value=${e} @change=${() => g(this, h, f).call(this)}
              >${e}</vaadin-checkbox
            >
          `
    )}
      </vaadin-checkbox-group>
    `;
  }
};
h = /* @__PURE__ */ new WeakSet(), f = function() {
  this.selected = this.element.value;
  const t = new CustomEvent("change", {
    bubbles: !0,
    composed: !0,
    detail: { selected: this.selected }
  });
  this.dispatchEvent(t);
}, $.styles = b`
    :host {
      display: inline-block;
    }
  `;
let i = $;
n([
  a({ type: Boolean })
], i.prototype, "disabled");
n([
  a({ type: String })
], i.prototype, "label");
n([
  a({ type: Array })
], i.prototype, "options");
n([
  a({ type: Array })
], i.prototype, "selected");
n([
  a({ type: String })
], i.prototype, "direction");
n([
  w("vaadin-checkbox-group")
], i.prototype, "element");
customElements.get("frc-checkbox-group") || customElements.define("frc-checkbox-group", i);
var B = Object.defineProperty, d = (t, e, s, E) => {
  for (var o = void 0, r = t.length - 1, l; r >= 0; r--)
    (l = t[r]) && (o = l(e, s, o) || o);
  return o && B(e, s, o), o;
}, u, k;
const x = class extends v {
  constructor() {
    super(...arguments), y(this, u), this.disabled = !1, this.label = "", this.options = [], this.selected = "", this.direction = "vertical";
  }
  render() {
    return p`
      <vaadin-radio-group
        @value-changed=${(e) => g(this, u, k).call(this, e)}
        .disabled=${this.disabled}
        .label=${this.label}
        theme=${this.direction}
        .value=${this.selected}
      >
        ${this.options.map(
      (e) => p`
            <vaadin-radio-button value=${e}>${e}</vaadin-radio-button>
          `
    )}
      </vaadin-radio-group>
    `;
  }
};
u = /* @__PURE__ */ new WeakSet(), k = function(t) {
  this.selected = t.detail.value;
  const e = new CustomEvent("change", {
    bubbles: !0,
    composed: !0,
    detail: { selected: this.selected }
  });
  this.dispatchEvent(e);
}, x.styles = b`
    :host {
      display: inline-block;
    }
  `;
let c = x;
d([
  a({ type: Boolean })
], c.prototype, "disabled");
d([
  a({ type: String })
], c.prototype, "label");
d([
  a({ type: Array })
], c.prototype, "options");
d([
  a({ type: String })
], c.prototype, "selected");
d([
  a({ type: String })
], c.prototype, "direction");
customElements.get("frc-radio-group") || customElements.define("frc-radio-group", c);
const G = C({
  tagName: "frc-checkbox-group",
  elementClass: i,
  react: S,
  events: {
    onchange: "change"
  }
});
export {
  G as CheckboxGroup,
  G as default
};
