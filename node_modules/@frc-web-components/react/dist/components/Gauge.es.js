import rt from "react";
import { U as st, M as U, H as ot, O as lt, o as ut } from "../property-C4BPH-wS-7fb0a59c.js";
import { h as gt } from "../query-BrpQj_Qi-db00b239.js";
import { l as ct } from "../_commonjsHelpers-DaMA6jEr-bedfce41.js";
var P = { exports: {} }, ft = P.exports, X;
function mt() {
  return X || (X = 1, function(y) {
    (function(i, u) {
      var p = u(i);
      y.exports ? y.exports = p : i.Gauge = p;
    })(typeof window > "u" ? ft : window, function(i, u) {
      var p = i.document, g = Array.prototype.slice, b = i.requestAnimationFrame || i.mozRequestAnimationFrame || i.webkitRequestAnimationFrame || i.msRequestAnimationFrame || function(m) {
        return setTimeout(m, 1e3 / 60);
      };
      function A(m) {
        var E = m.duration, k = 1, N = 60 * E, v = m.start || 0, z = m.end, C = z - v, q = m.step, R = m.easing || function(e) {
          return (e /= 0.5) < 1 ? 0.5 * Math.pow(e, 3) : 0.5 * (Math.pow(e - 2, 3) + 2);
        };
        function V() {
          var e = k / N, t = C * R(e) + v;
          q(t, k), k += 1, e < 1 && b(V);
        }
        b(V);
      }
      var W = /* @__PURE__ */ function() {
        var m = "http://www.w3.org/2000/svg", E = {
          centerX: 50,
          centerY: 50
        }, k = {
          dialRadius: 40,
          dialStartAngle: 135,
          dialEndAngle: 45,
          value: 0,
          max: 100,
          min: 0,
          valueDialClass: "value",
          valueClass: "value-text",
          dialClass: "dial",
          gaugeClass: "gauge",
          showValue: !0,
          gaugeColor: null,
          label: function(e) {
            return Math.round(e);
          }
        };
        function N() {
          var e = arguments[0], t = g.call(arguments, 1);
          return t.forEach(function(n) {
            for (var a in n)
              n.hasOwnProperty(a) && (e[a] = n[a]);
          }), e;
        }
        function v(e, t, n) {
          var a = p.createElementNS(m, e);
          for (var s in t)
            a.setAttribute(s, t[s]);
          return n && n.forEach(function(o) {
            a.appendChild(o);
          }), a;
        }
        function z(e, t) {
          return e * t / 100;
        }
        function C(e, t, n) {
          var a = Number(e);
          return a > n ? n : a < t ? t : a;
        }
        function q(e, t, n) {
          var a = n - t, s = e - t;
          return 100 * s / a;
        }
        function R(e, t, n, a) {
          var s = a * Math.PI / 180;
          return {
            x: Math.round((e + n * Math.cos(s)) * 1e3) / 1e3,
            y: Math.round((t + n * Math.sin(s)) * 1e3) / 1e3
          };
        }
        function V(e, t, n) {
          var a = E.centerX, s = E.centerY;
          return {
            end: R(a, s, e, n),
            start: R(a, s, e, t)
          };
        }
        return function(e, t) {
          t = N({}, k, t);
          var n = e, a = t.max, s = t.min, o = C(t.value, s, a), O = t.dialRadius, J = t.showValue, c = t.dialStartAngle, w = t.dialEndAngle, K = t.valueDialClass, Q = t.valueClass;
          t.valueLabelClass;
          var Z = t.dialClass, _ = t.gaugeClass, F = t.color, I, x, tt = t.label, et = t.viewBox, j;
          if (c < w) {
            console.log("WARN! startAngle < endAngle, Swapping");
            var at = c;
            c = w, w = at;
          }
          function B(r, d, f, l) {
            var h = V(r, d, f), L = h.start, T = h.end, it = typeof l > "u" ? 1 : l;
            return [
              "M",
              L.x,
              L.y,
              "A",
              r,
              r,
              0,
              it,
              1,
              T.x,
              T.y
            ].join(" ");
          }
          function nt(r) {
            I = v("text", {
              x: 50,
              y: 50,
              fill: "#999",
              class: Q,
              "font-size": "100%",
              "font-family": "sans-serif",
              "font-weight": "normal",
              "text-anchor": "middle",
              "alignment-baseline": "middle",
              "dominant-baseline": "central"
            }), x = v("path", {
              class: K,
              fill: "none",
              stroke: "#666",
              "stroke-width": 2.5,
              d: B(O, c, c)
              // value of 0
            });
            var d = z(100, 360 - Math.abs(c - w)), f = d <= 180 ? 0 : 1, l = v("svg", { viewBox: et || "0 0 100 100", class: _ }, [
              v("path", {
                class: Z,
                fill: "none",
                stroke: "#eee",
                "stroke-width": 2,
                d: B(O, c, w, f)
              }),
              v("g", { class: "text-container" }, [I]),
              x
            ]);
            r.appendChild(l);
          }
          function D(r, d) {
            var f = q(r, s, a), l = z(f, 360 - Math.abs(c - w)), h = l <= 180 ? 0 : 1;
            J && (I.textContent = tt.call(t, r)), x.setAttribute("d", B(O, c, l + c, h));
          }
          function H(r, d) {
            var f = F.call(t, r), l = d * 1e3, h = "stroke " + l + "ms ease";
            x.style.stroke = f, x.style["-webkit-transition"] = h, x.style["-moz-transition"] = h, x.style.transition = h;
          }
          return j = {
            setMaxValue: function(r) {
              a = r, D(o);
            },
            setValue: function(r) {
              o = C(r, s, a), F && H(o, 0), D(o);
            },
            setValueAnimated: function(r, d) {
              var f = o;
              o = C(r, s, a), f !== o && (F && H(o, d), A({
                start: f || 0,
                end: o,
                duration: d || 1,
                step: function(l, h) {
                  D(l);
                }
              }));
            },
            getValue: function() {
              return o;
            }
          }, nt(n), j.setValue(o), j;
        };
      }();
      return W;
    });
  }(P)), P.exports;
}
var Y, $;
function dt() {
  return $ || ($ = 1, Y = mt()), Y;
}
var ht = dt();
const vt = /* @__PURE__ */ ct(ht);
var pt = Object.defineProperty, S = (y, i, u, p) => {
  for (var g = void 0, b = y.length - 1, A; b >= 0; b--)
    (A = y[b]) && (g = A(i, u, g) || g);
  return g && pt(i, u, g), g;
};
const G = class extends ot {
  constructor() {
    super(...arguments), this.min = 0, this.max = 100, this.value = 0;
  }
  setSize() {
    const i = this.getBoundingClientRect(), u = i.width, p = i.height, g = Math.min(u, p);
    this.gaugeElement.style.width = `${g}px`;
  }
  gaugeInit() {
    this.gaugeElement.innerHTML = "", this.gauge = vt(this.gaugeElement, {
      min: Math.min(this.min, this.max),
      max: Math.max(this.min, this.max)
    }), this.setSize();
  }
  firstUpdated() {
    this.gaugeInit(), new ResizeObserver(() => this.setSize()).observe(this);
  }
  updated(i) {
    var u;
    (i.has("min") || i.has("max")) && this.gaugeInit(), (u = this.gauge) == null || u.setValue(this.value);
  }
  render() {
    return lt`
      <div class="gauge-container-container">
        <div id="gauge" class="gauge-container"></div>
      </div>
    `;
  }
};
G.styles = st`
    :host {
      display: inline-block;
      width: 200px;
      height: 200px;
    }

    .gauge-container-container {
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    .gauge-container {
      display: block;
    }

    .gauge-container > .gauge > .dial {
      stroke: #ddd;
      stroke-width: 3;
      fill: rgba(0, 0, 0, 0);
      stroke: var(--frc-gauge-color, rgb(221, 221, 221));
    }
    .gauge-container > .gauge > .value {
      stroke: var(--frc-gauge-fill-color, rgb(47, 180, 200));
      stroke-width: 3;
      fill: rgba(0, 0, 0, 0);
    }
    .gauge-container > .gauge .value-text {
      fill: var(--frc-gauge-text-color, rgb(100, 100, 100));
      font-family: sans-serif;
      font-size: 1em;
    }
  `;
let M = G;
S([
  U({ type: Number })
], M.prototype, "min");
S([
  U({ type: Number })
], M.prototype, "max");
S([
  U({ type: Number })
], M.prototype, "value");
S([
  gt("#gauge")
], M.prototype, "gaugeElement");
customElements.get("frc-gauge") || customElements.define("frc-gauge", M);
const kt = ut({
  tagName: "frc-gauge",
  elementClass: M,
  react: rt
});
export {
  kt as Gauge,
  kt as default
};
