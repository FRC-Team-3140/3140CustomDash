import k, { useState as $, useEffect as w } from "react";
import { u as S } from "../NT4Provider-5cc60b98.js";
import { U as p, M as h, H as f, T as g, O as z, o as O } from "../property-C4BPH-wS-7fb0a59c.js";
import { n as y } from "../state-Cn3aen3G-6b8e5a08.js";
import { h as R } from "../query-BrpQj_Qi-db00b239.js";
import "react/jsx-runtime";
import "@frc-web-components/fwc";
var j = Object.defineProperty, c = (o, e, t, s) => {
  for (var r = void 0, i = o.length - 1, n; i >= 0; i--)
    (n = o[i]) && (r = n(e, t, r) || r);
  return r && j(e, t, r), r;
};
function b(o) {
  const e = (o == null ? void 0 : o.getChildren()) ?? {};
  return Object.values(e).filter(
    (t) => {
      var s;
      return t.hasChildren() && ((s = t.getChildren()[".type"]) == null ? void 0 : s.getSourceValue()) === "line";
    }
  ).map((t) => {
    const s = t.getChildren();
    return {
      angle: s.angle.getSourceValue() ?? 0,
      color: s.color.getSourceValue() ?? "#ffffff",
      length: s.length.getSourceValue() ?? 1,
      weight: s.weight.getSourceValue() ?? 1,
      children: b(t)
    };
  });
}
function M(o) {
  const e = (o == null ? void 0 : o.getChildren()) ?? {};
  return Object.values(e).filter(
    (t) => t.hasChildren()
  ).map((t) => ({
    x: t.getChildren().x.getSourceValue() ?? 0,
    y: t.getChildren().y.getSourceValue() ?? 0,
    children: b(t)
  }));
}
const x = class extends f {
  constructor() {
    super(...arguments), this.backgroundColor = "#000020", this.dims = [3, 3], this.roots = [], this.mechanism2d = this.getMechanism2d();
  }
  firstUpdated() {
    new ResizeObserver(() => {
      this.resized();
    }).observe(this), requestAnimationFrame(() => {
      this.updateMechanism2d();
    });
  }
  getMech2dSize() {
    const { width: e, height: t } = this.getBoundingClientRect(), [s, r] = this.dims;
    return r / s * e < t ? [e, r / s * e] : [s / r * t, t];
  }
  resized() {
    this.requestUpdate();
  }
  getSize() {
    const { width: e } = this.getBoundingClientRect();
    return e;
  }
  updated(e) {
    e.has("backgroundColor") && this._svg.style.setProperty("background-color", this.backgroundColor), e.has("dims") && this.requestUpdate();
  }
  updateMechanism2d() {
    this.mechanism2d = this.getMechanism2d(), requestAnimationFrame(() => {
      this.updateMechanism2d();
    });
  }
  getMechanism2d() {
    return {
      backgroundColor: this.backgroundColor,
      dims: this.dims,
      roots: this.roots
    };
  }
  render() {
    const [e, t] = this.getMech2dSize();
    return g`
      <svg
        style="width: ${e}px; height: ${t}px; background: ${this.mechanism2d.backgroundColor}"
      >
        ${this.mechanism2d.roots.map(
      (s) => this.renderMechanism2dRoot(s)
    )}
      </svg>
    `;
  }
  renderMechanism2dRoot(e) {
    const [t, s] = this.dims, [r, i] = this.getMech2dSize(), n = e.x / t * r, m = e.y / s * i;
    return g`
      <g style="transform: translate(${n}px, ${i - m}px)">
        ${e.children.map((l) => this.renderMechanism2dLine(l))}
      </g>
    `;
  }
  renderMechanism2dLine(e) {
    const [t] = this.dims, [s] = this.getMech2dSize(), r = s / t * e.length, i = e.angle * Math.PI / 180, n = Math.cos(i) * r, m = -Math.sin(i) * r, l = Math.max(1, e.weight * 2 / 3);
    return g`
      <line stroke=${e.color} stroke-width=${l} x1="0" y1="0" x2="${n}px" y2="${m}px"  />
      <g style="transform: translate(${n}px, ${m}px) rotate(${-e.angle}deg)">
        ${e.children.map((v) => this.renderMechanism2dLine(v))}
      </g>
    `;
  }
};
x.styles = p`
    :host {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      position: relative;
      width: 300px;
      height: 300px;
    }

    svg {
      width: 100%;
      height: 100%;
    }
  `;
let a = x;
c([
  h({ type: String, attribute: "background-color" })
], a.prototype, "backgroundColor");
c([
  h({ type: Array })
], a.prototype, "dims");
c([
  h({ type: Array })
], a.prototype, "roots");
c([
  R("svg")
], a.prototype, "_svg");
c([
  y()
], a.prototype, "mechanism2d");
customElements.get("frc-mechanism2d") || customElements.define("frc-mechanism2d", a);
var V = Object.defineProperty, u = (o, e, t, s) => {
  for (var r = void 0, i = o.length - 1, n; i >= 0; i--)
    (n = o[i]) && (r = n(e, t, r) || r);
  return r && V(e, t, r), r;
};
const C = class extends f {
  constructor() {
    super(...arguments), this.backgroundColor = "#000020", this.dims = [3, 3], this.roots = [];
  }
  updateMechanism2d() {
    this.roots = this.source ? M(this.source) : [], requestAnimationFrame(() => {
      this.updateMechanism2d();
    });
  }
  firstUpdated() {
    this.updateMechanism2d();
  }
  render() {
    return z`
      <frc-mechanism2d
        .roots=${this.roots}
        .backgroundColor=${this.backgroundColor}
        .dims=${this.dims}
      ></frc-mechanism2d>
    `;
  }
};
C.styles = p`
    :host {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      position: relative;
      width: 300px;
      height: 300px;
    }

    frc-mechanism2d {
      width: 100%;
      height: 100%;
    }
  `;
let d = C;
u([
  h({ type: String, attribute: "background-color" })
], d.prototype, "backgroundColor");
u([
  h({ type: Array })
], d.prototype, "dims");
u([
  h({ type: Object })
], d.prototype, "source");
u([
  y()
], d.prototype, "roots");
customElements.get("frc-mechanism2d-wrapper") || customElements.define("frc-mechanism2d-wrapper", d);
const B = O({
  tagName: "frc-mechanism2d",
  elementClass: a,
  react: k
});
function _(o) {
  const { store: e } = S(), [t, s] = $([]);
  return w(() => e.subscribe(
    "NetworkTables",
    o,
    () => {
      const r = e.getSource("NetworkTables", o);
      r && s(M(r));
    },
    !0
  ), []), t;
}
export {
  B as Mechanism2d,
  B as default,
  _ as useMechanism2dRoots
};
