import f from "react";
import { U as m, M as g, H as v, O as u, T as k, o as b } from "../property-C4BPH-wS-7fb0a59c.js";
import { h } from "../query-BrpQj_Qi-db00b239.js";
import { E as d } from "../transform-DR-Bw75L-3629b551.js";
function x(r, t, e) {
  r = +r, t = +t, e = (s = arguments.length) < 2 ? (t = r, r = 0, 1) : s < 3 ? 1 : +e;
  for (var n = -1, s = Math.max(0, Math.ceil((t - r) / e)) | 0, l = new Array(s); ++n < s; )
    l[n] = r + n * e;
  return l;
}
var w = Object.defineProperty, a = (r, t, e, n) => {
  for (var s = void 0, l = r.length - 1, o; l >= 0; l--)
    (o = r[l]) && (s = o(t, e, s) || s);
  return s && w(t, e, s), s;
};
function _(r) {
  return r * Math.PI / 180;
}
function y(r) {
  return r * 180 / Math.PI;
}
function R(r, t, e) {
  return Math.min(e, Math.max(r, t));
}
function c(r, t = !1) {
  const e = _(-(r - 90));
  return [t ? -Math.cos(e) : Math.cos(e), Math.sin(e)];
}
const p = class extends v {
  constructor() {
    super(...arguments), this.value = 0, this.hideLabel = !1, this.precision = 2, this.counterClockwise = !1, this.fromRadians = !1;
  }
  setLabels() {
    const t = this.getGyroRadius();
    d(this._labels).selectAll("text").data([0, 45, 90, 135, 180, -135, -90, -45]).join(
      (e) => e.append("text").attr("text-anchor", "middle").attr("alignment-baseline", "middle").attr("font-size", 15).attr("fill", "var(--frc-gyro-color, #000)").text((n) => `${n}Â°`)
    ).attr(
      "x",
      (e) => c(e, this.counterClockwise)[0] * (t + 30)
    ).attr(
      "y",
      (e) => -c(e, this.counterClockwise)[1] * (t + 30)
    );
  }
  setDialAngle() {
    const t = this.getGyroRadius(), e = this.fromRadians ? y(this.value) : this.value;
    d(this._dial).attr(
      "x2",
      c(e, this.counterClockwise)[0] * (t - 7)
    ).attr(
      "y2",
      -c(e, this.counterClockwise)[1] * (t - 7)
    );
  }
  addTicks(t, e, n, s) {
    const l = this.getGyroRadius();
    d(t).selectAll("line").data(x(0, 360, n)).join(
      (o) => o.append("line").attr("stroke", "var(--frc-gyro-color, #000)").attr("stroke-width", s)
    ).attr("x1", (o) => c(o)[0] * l).attr("y1", (o) => -c(o)[1] * l).attr(
      "x2",
      (o) => c(o)[0] * (l + e)
    ).attr(
      "y2",
      (o) => -c(o)[1] * (l + e)
    );
  }
  firstUpdated() {
    new ResizeObserver(() => {
      this.resized();
    }).observe(this), this.resized();
  }
  resized() {
    const t = this.getSize();
    d(this._svg).attr("width", t).attr("height", t), d(this._gyro).attr(
      "transform",
      `translate(${t / 2},${t / 2})`
    );
    const e = this.getGyroRadius();
    d(this._gyroEdge).attr("r", e), this.addTicks(this._minorTicks, 5, 5, 1), this.addTicks(this._majorTicks, 10, 45, 2), this.setLabels(), this.setDialAngle();
  }
  getSize() {
    const { width: t } = this.getBoundingClientRect();
    return t;
  }
  getGyroRadius() {
    return this.getSize() / 2 - 53;
  }
  updated(t) {
    (t.has("value") || t.has("fromRadians") || t.has("counterClockwise")) && this.setDialAngle(), t.has("counterClockwise") && this.setLabels();
  }
  render() {
    const t = `${(this.fromRadians ? y(this.value) : this.value).toFixed(R(this.precision, 0, 100))}`;
    return u`
      <div>
        ${k`
          <svg>
            <g class="gyro">
              <circle class="gyro-edge" stroke-width="2" stroke="var(--frc-gyro-color, #000)" style="fill: none"></circle>
              <g class="minor-ticks"></g>
              <g class="major-ticks"></g>
              <g class="labels"></g>
              <circle class="dial-circle" r="9"></circle>
              <line class="dial" x1="0" x2="0"></line>
            </g>
          </svg>
        `} ${this.hideLabel ? null : u`<label>${t}&deg</label> `}
      </div>
    `;
  }
};
p.styles = m`
    :host {
      font-family: sans-serif;
      display: inline-flex;
      flex-direction: column;
      align-items: center;
      position: relative;
      width: 300px;
      height: auto;
    }

    svg {
      width: 100%;
    }

    label {
      color: var(--frc-gyro-color, #000);
      text-align: center;
      display: block;
      font-size: 16px;
    }

    .dial-circle {
      fill: var(--frc-gyro-dial-color, blue);
    }

    .dial {
      stroke: var(--frc-gyro-dial-color, blue);
      stroke-width: 3;
    }
  `;
let i = p;
a([
  g({ type: Number })
], i.prototype, "value");
a([
  g({ type: Boolean, attribute: "hide-label" })
], i.prototype, "hideLabel");
a([
  g({ type: Number })
], i.prototype, "precision");
a([
  g({ type: Boolean, attribute: "counter-clockwise" })
], i.prototype, "counterClockwise");
a([
  g({ type: Boolean, attribute: "from-radians" })
], i.prototype, "fromRadians");
a([
  h("svg")
], i.prototype, "_svg");
a([
  h(".dial")
], i.prototype, "_dial");
a([
  h(".gyro")
], i.prototype, "_gyro");
a([
  h(".gyro-edge")
], i.prototype, "_gyroEdge");
a([
  h(".minor-ticks")
], i.prototype, "_minorTicks");
a([
  h(".major-ticks")
], i.prototype, "_majorTicks");
a([
  h(".labels")
], i.prototype, "_labels");
customElements.get("frc-gyro") || customElements.define("frc-gyro", i);
const j = b({
  tagName: "frc-gyro",
  elementClass: i,
  react: f
});
export {
  j as Gyro,
  j as default
};
