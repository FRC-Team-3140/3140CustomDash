import b from "react";
import { U as y, M as r, H as C, O as S, o as E } from "../property-C4BPH-wS-7fb0a59c.js";
const i = {
  info: {
    color: "#fff",
    name: "INFO",
    level: 1
  },
  debug: {
    color: "#fff",
    name: "DEBUG",
    level: 0
  },
  fatal: {
    color: "#FF3E3E",
    name: "ERROR",
    level: 4
  },
  warning: {
    color: "#FFC53E",
    name: "WARNING",
    level: 3
  },
  success: {
    color: "#3EFF45",
    name: "SUCCESS",
    level: 2
  }
}, x = {
  name: "Html Logger",
  enabled: !0,
  maxLogCount: 1e3,
  loggingFormat: "[MESSAGE]",
  //"[LEVEL] [MESSAGE]",
  argumentsSeparator: " ",
  utcTime: !1,
  level: 0
};
var $ = function(a) {
  var t = [].slice.call(arguments, 1);
  return t.forEach(function(e) {
    for (var o in e)
      a[o] = e[o];
  }), a;
};
class w {
  constructor(t, e = document.body) {
    this.options = $({}, x, t || {}), this.parent = e, this.linesCount = 0, this.$ = {}, this.initialized = !1;
  }
  init() {
    if (this.initialized)
      return;
    if (!document || !document.createElement || !document.body || !document.body.appendChild)
      throw new Error("HtmlLogger not initialized");
    this.$.container = document.createElement("div"), this.$.container.setAttribute("style", `width:100%; height: 100%;
					margin:0;
					left:0;
					background: rgba(0, 0, 0, 0.8);
					overflow:auto;
					padding: 5px 7px;
    			box-sizing: border-box;`), this.$.log = document.createElement("div");
    const t = document.createElement("span");
    t.style.color = "#afa", t.style.fontWeight = "bold";
    const e = `===== ${this.options.name} - Logger started at ${this.options.utcTime ? (/* @__PURE__ */ new Date()).toUTCString() : /* @__PURE__ */ new Date()} =====`;
    t.appendChild(document.createTextNode(e));
    const o = document.createElement("div");
    o.appendChild(t), o.appendChild(document.createElement("br")), o.appendChild(document.createElement("br")), this.$.container.appendChild(o), this.$.container.appendChild(this.$.log), this.parent.appendChild(this.$.container), this.initialized = !0;
  }
  setLevel(t) {
    this.options.level = t;
  }
  setEnable(t = !0) {
    this.initialized && (this.options.enabled = t, this.$.log.style.color = t ? "#fff" : "#444");
  }
  /**
   * Removes all lines from the view
   * @memberOf HtmlLogger
   */
  clean() {
    if (this.initialized) {
      for (; this.$.log.firstChild; )
        this.$.log.removeChild(this.$.log.firstChild);
      this.linesCount = 0;
    }
  }
  /**
   * prints message. default level is [info].
   * @param {String} msg - message to print
   * @param {String} [hexColor=levels.info.color] - hexcolor text
   * @param {String} [level=levels.info.name] - level suffix
   *
   * @memberOf HtmlLogger
   */
  print(t, e = i.info.color, o = i.info.name) {
    if (!this.initialized || !this.options.enabled)
      return;
    const l = this.$.container.scrollTop > this.$.container.scrollHeight - this.$.container.clientHeight - 5, h = (t.length ? t : "[empty]").split(/\r\n|\r|\n/);
    for (let d = 0; d < h.length; d++) {
      let g = document.createElement("div");
      g.setAttribute("style", "color:#999;float:left;");
      let f = this._getTime();
      g.appendChild(document.createTextNode(`${f}Â `));
      let v = this.options.loggingFormat.replace("[LEVEL]", o).replace("[MESSAGE]", h[d]), p = document.createElement("div");
      p.setAttribute(
        "style",
        `word-wrap:break-word;margin-left:6.0em;color: ${e}`
      ), p.appendChild(document.createTextNode(v));
      let m = document.createElement("div");
      m.setAttribute("style", "clear:both;");
      var c = document.createElement("div");
      for (c.appendChild(g), c.appendChild(p), c.appendChild(m), this.$.log.appendChild(c), this.linesCount++; this.linesCount > this.options.maxLogCount; )
        this.$.log.childNodes[0].remove(), this.linesCount--;
      l && (this.$.container.scrollTop = this.$.container.scrollHeight);
    }
  }
  info() {
    this.options.level <= i.info.level && this.print(
      [].map.call(arguments, this._determineString).join(this.options.argumentsSeparator)
    );
  }
  debug() {
    this.options.level <= i.debug.level && this.print(
      [].map.call(arguments, this._determineString).join(this.options.argumentsSeparator),
      i.debug.color,
      i.debug.name
    );
  }
  warning() {
    this.options.level <= i.warning.level && this.print(
      [].map.call(arguments, this._determineString).join(this.options.argumentsSeparator),
      i.warning.color,
      i.warning.name
    );
  }
  success() {
    this.options.level <= i.success.level && this.print(
      [].map.call(arguments, this._determineString).join(this.options.argumentsSeparator),
      i.success.color,
      i.success.name
    );
  }
  error() {
    this.options.level <= i.fatal.level && this.print(
      [].map.call(arguments, this._determineString).join(this.options.argumentsSeparator),
      i.fatal.color,
      i.fatal.name
    );
  }
  _getTime() {
    return (this.options.utcTime ? (/* @__PURE__ */ new Date()).toUTCString() : (/* @__PURE__ */ new Date()).toString()).match(/([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]/)[0];
  }
  _determineString(t) {
    if (t === void 0)
      return "undefined";
    if (t === null)
      return "null";
    if (t instanceof Array)
      return JSON.stringify(t);
    switch (typeof t) {
      default:
      case "object":
        return `${t.constructor ? t.constructor.name : t.toString()} -> ${JSON.stringify(t)}`;
      case "function":
        return t.name || "[function]";
      case "number":
      case "string":
      case "boolean":
        return t;
    }
  }
}
var L = Object.defineProperty, s = (a, t, e, o) => {
  for (var l = void 0, h = a.length - 1, c; h >= 0; h--)
    (c = a[h]) && (l = c(t, e, l) || l);
  return l && L(t, e, l), l;
};
const u = class extends C {
  constructor() {
    super(...arguments), this.title = "Robot Logger", this.maxLogCount = 1e3, this.debug = "", this.info = "", this.success = "", this.warning = "", this.error = "", this.level = "info", this.disabled = !1, this.levels = ["debug", "info", "success", "warning", "error"];
  }
  firstUpdated() {
    const t = this.renderRoot.querySelector(
      "[part=logger]"
    );
    this.logger = new w(
      {
        name: this.title,
        maxLogCount: Math.max(0, this.maxLogCount),
        level: this.levels.indexOf(this.level),
        enabled: !this.disabled
      },
      t
    ), this.logger.init();
  }
  updated(t) {
    this.levels.forEach((e) => {
      t.has(e) && this[e] && this.logger[e](this[e]);
    }), t.has("maxLogCount") && (this.logger.options.maxLogCount = Math.max(0, this.maxLogCount)), t.has("level") && this.logger.setLevel(this.levels.indexOf(this.level)), t.has("disabled") && this.logger.setEnable(!this.disabled);
  }
  render() {
    return S` <div part="logger"></div> `;
  }
};
u.styles = y`
    :host {
      display: inline-block;
      width: 500px;
      height: 400px;
      font-family: monospace;
      font-size: 14px;
    }

    [part='logger'] {
      width: 100%;
      height: 100%;
    }
  `;
let n = u;
s([
  r({ type: String })
], n.prototype, "title");
s([
  r({ type: Number, attribute: "max-log-count" })
], n.prototype, "maxLogCount");
s([
  r({ type: String })
], n.prototype, "debug");
s([
  r({ type: String })
], n.prototype, "info");
s([
  r({ type: String })
], n.prototype, "success");
s([
  r({ type: String })
], n.prototype, "warning");
s([
  r({ type: String })
], n.prototype, "error");
s([
  r({ type: String })
], n.prototype, "level");
s([
  r({ type: Boolean })
], n.prototype, "disabled");
customElements.get("frc-logger") || customElements.define("frc-logger", n);
const F = E({
  tagName: "frc-logger",
  elementClass: n,
  react: b
});
export {
  F as Logger,
  F as default
};
