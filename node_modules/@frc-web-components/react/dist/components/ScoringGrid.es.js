import N from "react";
import { U as w, M as s, H as $, O as l, T as p, o as A } from "../property-C4BPH-wS-7fb0a59c.js";
import { n as x } from "../state-Cn3aen3G-6b8e5a08.js";
import { p as k } from "../style-map-CXHve4fi-4b8d68f4.js";
import { o as u } from "../when-CDK1Tt5Y-835602a5.js";
import "../directive-B76A7YXI-abc0af54.js";
var S = (t) => {
  throw TypeError(t);
}, B = (t, e, o) => e.has(t) || S("Cannot " + o), C = (t, e, o) => e.has(t) ? S("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, o), f = (t, e, o) => (B(t, e, "access private method"), o), M = Object.defineProperty, g = (t, e, o, i) => {
  for (var r = void 0, c = t.length - 1, h; c >= 0; c--)
    (h = t[c]) && (r = h(e, o, r) || r);
  return r && M(e, o, r), r;
}, m, I;
const L = class extends $ {
  constructor() {
    super(...arguments), C(this, m), this.nodeId = 1, this.selected = !1, this.cones = 0, this.cubes = 0, this.background = "";
  }
  updated(e) {
    (e.has("selected") || e.has("nodeId")) && f(this, m, I).call(this);
  }
  render() {
    return l`
      <div style="text-align: center; margin-block:auto;">${this.nodeId}</div>

      <!-- empty on:click binding above passes click events to be bound on the Node component -->
      ${p`
        <svg
          viewBox="-2 -2 28 28"
          style="margin-right: 8px; width:100%; height:100%; pointer-events:none"
        >
          ${u(
      this.cubes > 1,
      () => p`
              <polygon
                points="8,8 8,20 20,20, 20,8"
                style="fill:rgb(150,0,255);stroke-width:1;stroke:rgb(0,0,0)"
              />
              <polygon
                points="4,4 4,16 16,16, 16,4"
                style="fill:rgb(150,0,255);stroke-width:1;stroke:rgb(0,0,0)"
              />
            `
    )}
          ${u(
      this.cubes === 1,
      () => p`
              <polygon
                points="6,6 6,18 18,18, 18,6"
                style="fill:rgb(150,0,255);stroke-width:1;stroke:rgb(0,0,0)"
              />
            `
    )}
          ${u(
      this.cones > 1,
      () => p`
              <polygon
                points="13,8 11,8 8,22 5,22 19,22 16,22"
                style="fill:rgb(255,200,0);stroke-width:1;stroke:rgb(0,0,0)"
              />
              <polygon
                points="13,4 11,4 8,18 5,18 19,18 16,18"
                style="fill:rgb(255,200,0);stroke-width:1;stroke:rgb(0,0,0)"
              />
            `
    )}
          
          ${u(
      this.cones === 1,
      () => p`
              <polygon
                points="13,6 11,6 8,20 5,20 19,20 16,20"
                style="fill:rgb(255,200,0);stroke-width:1;stroke:rgb(0,0,0)"
              />
            `
    )}  
        </svg>
      `}
    `;
  }
};
m = /* @__PURE__ */ new WeakSet(), I = function() {
  this.selected ? this.background = "green" : this.nodeId >= 1 && this.nodeId <= 9 ? this.background = "lightgray" : (this.nodeId - 1) % 3 === 1 ? this.background = "purple" : this.background = "yellow", this.style.setProperty("background-color", this.background);
}, L.styles = w`
    :host {
      display: block;
      color: black;
      font-size: 2em;
      height: 100%;
      flex-grow: 1;
      border: 1px solid black;
      box-sizing: border-box;
    }
  `;
let a = L;
g([
  s({ type: Number, attribute: "node-id" })
], a.prototype, "nodeId");
g([
  s({ type: Boolean })
], a.prototype, "selected");
g([
  s({ type: Number })
], a.prototype, "cones");
g([
  s({ type: Number })
], a.prototype, "cubes");
g([
  x()
], a.prototype, "background");
customElements.get("frc-scoring-grid-node") || customElements.define("frc-scoring-grid-node", a);
var z = Object.defineProperty, d = (t, e, o, i) => {
  for (var r = void 0, c = t.length - 1, h; c >= 0; c--)
    (h = t[c]) && (r = h(e, o, r) || r);
  return r && z(e, o, r), r;
};
function y(t, e = !1) {
  return e ? 9 - (t - 1) % 9 : 1 + (t - 1) % 9;
}
function v(t, e = !1) {
  return e ? 3 - Math.floor((t - 1) / 9) : Math.floor((t - 1) / 9) + 1;
}
function P(t, e) {
  return Array.from(Array(e + 1).keys()).slice(t);
}
var b, O, E;
const R = class extends $ {
  constructor() {
    super(...arguments), C(this, b), this.selection = 0, this.cubesScored = [], this.conesScored = [], this.hideLinks = !1, this.reverseRow = !1, this.reverseCol = !1, this.leftOfLinks = [];
  }
  updated(e) {
    (e.has("cubesScored") || e.has("conesScored")) && f(this, b, E).call(this);
  }
  renderLinks() {
    return this.hideLinks ? l`` : l`
      ${this.leftOfLinks.map(
      (e) => l`
          <div
            class="link"
            style=${k({
        gridColumn: `${Math.min(
          y(e, this.reverseCol),
          y(e + 2, this.reverseCol)
        )} / span 3`,
        gridRow: v(e, this.reverseRow)
      })}
          ></div>
        `
    )}
    `;
  }
  render() {
    return l`
      <div class="grid">
        ${P(1, 27).map(
      (e) => l`
            <div
              style=${k({
        gridColumn: y(e, this.reverseCol),
        gridRow: v(e, this.reverseRow)
      })}
            >
              <frc-scoring-grid-node
                node-id=${e}
                ?selected=${this.selection === e}
                @click=${() => {
        f(this, b, O).call(this, e);
      }}
                cubes=${this.cubesScored.filter((o) => o === e).length}
                cones=${this.conesScored.filter((o) => o === e).length}
              >
              </frc-scoring-grid-node>
            </div>
          `
    )}
        ${this.renderLinks()}
      </div>
    `;
  }
};
b = /* @__PURE__ */ new WeakSet(), O = function(t) {
  this.selection === t ? this.selection = 0 : this.selection = t;
  const e = new CustomEvent("select", {
    bubbles: !0,
    composed: !0,
    detail: { nodeId: this.selection }
  });
  this.dispatchEvent(e);
}, E = function() {
  const t = [], e = this.cubesScored.concat(this.conesScored);
  for (let o = 0; o < 3; o += 1)
    for (let i = 1; i <= 7; i += 1)
      e.includes(o * 9 + i) && e.includes(o * 9 + i + 1) && e.includes(o * 9 + i + 2) && (t.push(o * 9 + i), i += 2);
  this.leftOfLinks = t;
}, R.styles = w`
    :host {
      display: inline-block;
      width: 550px;
      height: 380px;
    }

    .grid {
      display:grid;
      grid-template-columns: repeat(9, calc(100% / 9));
      grid-template-rows: repeat(3, calc(100% / 3));
      height:100%;
      width:100%;
      flex-direction:row-reverse;
      grid-auto-flow: dense;"
    }

    .link {
      border: 5px solid black;
      border-radius: 10px;
      margin: 5px;
      box-sizing: border-box;
      pointer-events: none;
    }
  `;
let n = R;
d([
  s({ type: Number })
], n.prototype, "selection");
d([
  s({ type: Array, attribute: "cubes-scored" })
], n.prototype, "cubesScored");
d([
  s({ type: Array, attribute: "cones-scored" })
], n.prototype, "conesScored");
d([
  s({ type: Boolean, attribute: "hide-links" })
], n.prototype, "hideLinks");
d([
  s({ type: Boolean, attribute: "reverse-row" })
], n.prototype, "reverseRow");
d([
  s({ type: Boolean, attribute: "reverse-col" })
], n.prototype, "reverseCol");
d([
  x()
], n.prototype, "leftOfLinks");
customElements.get("frc-scoring-grid") || customElements.define("frc-scoring-grid", n);
const D = A({
  tagName: "frc-scoring-grid",
  elementClass: n,
  react: N,
  events: {
    onselect: "select"
  }
});
export {
  D as ScoringGrid,
  D as default
};
