import d, { useState as g, useEffect as y } from "react";
import { U as N, M as c, H as S, O as r, o as D } from "../property-C4BPH-wS-7fb0a59c.js";
import "../icon-Dc8f99z4-878f257b.js";
import { u as C } from "../NT4Provider-5cc60b98.js";
import "react/jsx-runtime";
import "@frc-web-components/fwc";
var T = Object.defineProperty, m = (s, a, i, p) => {
  for (var t = void 0, e = s.length - 1, o; e >= 0; e--)
    (o = s[e]) && (t = o(a, i, t) || t);
  return t && T(a, i, t), t;
};
const v = 1, M = 2, x = 4, A = 8, F = 16, E = 32, I = ["Unknown", "Practice", "Qualification", "Elimination"], h = class extends S {
  constructor() {
    super(...arguments), this.matchType = 0, this.matchNumber = 0, this.eventName = "", this.fmsControlData = 0;
  }
  getRobotState() {
    return this.isEnabled() ? this.isTest() ? "Test" : this.isAuto() ? "Autonomous" : "Teleoperated" : "Disabled";
  }
  isEnabled() {
    return !!(this.fmsControlData & v);
  }
  isAuto() {
    return !!(this.fmsControlData & M);
  }
  isTest() {
    return !!(this.fmsControlData & x);
  }
  isEmergencyStopped() {
    return !!(this.fmsControlData & A);
  }
  isFmsAttached() {
    return !!(this.fmsControlData & F);
  }
  isDsAttached() {
    return !!(this.fmsControlData & E);
  }
  render() {
    return r`
      <p>
        <strong>
          <span>${this.eventName}</span>
          <span>${I[this.matchType]}</span>
          <span>match ${this.matchNumber}</span>
        </strong>
      </p>

      <p style="margin-bottom: 7px; font-weight: normal">
        <span style="margin-right: 5px;">
          ${this.isFmsAttached() ? r`
                <span class="info">
                  <frc-icon icon="check" color="green"></frc-icon>
                  FMS connected
                </span>
              ` : r`
                <span class="info">
                  <frc-icon icon="close" color="red"></frc-icon>
                  FMS disconnected
                </span>
              `}
        </span>
        <span>
          ${this.isDsAttached() ? r`
                <span class="info">
                  <frc-icon icon="check" color="green"></frc-icon>
                  DriverStation connected
                </span>
              ` : r`
                <span class="info">
                  <frc-icon icon="close" color="red"></frc-icon>
                  DriverStation disconnected
                </span>
              `}
        </span>
      </p>
      <p style="font-weight: normal">Robot state: ${this.getRobotState()}</p>
    `;
  }
};
h.styles = N`
    p {
      margin: 5px 0;
    }
    p:first-child {
      margin-top: 0;
    }
    p:last-child {
      margin: 0;
    }
    :host {
      text-align: center;
      font-size: 15px;
      display: inline-flex;
      width: auto;
      flex-direction: column;
      justify-content: center;
      font-family: sans-serif;
      color: var(--frc-basic-fms-info-text-color, #000);
    }

    .info {
      display: inline-flex;
      align-items: center;
      gap: 3px;
    }
  `;
let n = h;
m([
  c({ type: Number, attribute: "match-type" })
], n.prototype, "matchType");
m([
  c({ type: Number, attribute: "match-number" })
], n.prototype, "matchNumber");
m([
  c({ type: String, attribute: "event-name" })
], n.prototype, "eventName");
m([
  c({ type: Number, attribute: "fms-control-data" })
], n.prototype, "fmsControlData");
customElements.get("frc-basic-fms-info") || customElements.define("frc-basic-fms-info", n);
const _ = D({
  tagName: "frc-basic-fms-info",
  elementClass: n,
  react: d
}), R = {
  EventName: "eventName",
  FMSControlData: "fmsControlData",
  GameSpecificMessage: "gameSpecificMessage",
  IsRedAlliance: "isRedAlliance",
  MatchNumber: "matchNumber",
  MatchType: "matchType",
  ReplayNumber: "replayNumber",
  StationNumber: "stationNumber"
}, u = {
  eventName: "",
  fmsControlData: 0,
  gameSpecificMessage: "",
  isRedAlliance: !1,
  matchNumber: 0,
  matchType: 0,
  relayNumber: 0,
  stationNumber: 0
};
function z(s) {
  const { store: a } = C(), [i, p] = g({ ...u });
  return y(() => a.subscribe(
    "NetworkTables",
    s,
    () => {
      var o;
      const t = { ...u }, e = a.getSource("NetworkTables", s);
      if (e) {
        const f = e.getChildren();
        ((o = e.getChildren()[".type"]) == null ? void 0 : o.getSourceValue()) === "FMSInfo" && Object.entries(R).forEach(
          ([l, b]) => {
            l in f && (t[b] = f[l].getSourceValue());
          }
        );
      }
      p(t);
    },
    !0
  ), []), i;
}
export {
  _ as BasicFmsInfo,
  _ as default,
  z as useFmsInfo
};
