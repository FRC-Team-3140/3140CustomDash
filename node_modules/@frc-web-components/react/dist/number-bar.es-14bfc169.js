import { U as u, M as e, H as c, O as m } from "./property-C4BPH-wS-7fb0a59c.js";
import "./bar.es-bc02d3c5.js";
import "./axis.es-29b40501.js";
var x = Object.defineProperty, i = (n, r, a, y) => {
  for (var s = void 0, o = n.length - 1, p; o >= 0; o--)
    (p = n[o]) && (s = p(r, a, s) || s);
  return s && x(r, a, s), s;
};
function b(n, r, a) {
  return Math.min(a, Math.max(n, r));
}
const h = class extends c {
  constructor() {
    super(...arguments), this.value = 0, this.min = -1, this.max = 1, this.center = 0, this.precision = 2, this.hideText = !1, this.numTickMarks = 3, this.unit = "";
  }
  render() {
    const r = Math.min(this.min, this.max), a = Math.max(this.min, this.max);
    return m`
      <frc-bar
        value="${this.value}"
        min="${r}"
        max="${a}"
        center="${this.center}"
        part="bar"
      >
        ${this.hideText ? "" : m`
              ${this.value.toFixed(b(this.precision, 0, 100))} ${this.unit}
            `}
      </frc-bar>
      ${this.numTickMarks > 0 ? m`
            <frc-axis
              part="axis"
              ticks="${this.numTickMarks}"
              min=${r}
              max=${a}
              unit="${this.unit}"
            ></frc-axis>
          ` : ""}
    `;
  }
};
h.styles = [
  u`
      :host {
        display: inline-block;
        width: 300px;
        height: auto;
        font-family: sans-serif;
      }

      [part='bar'] {
        width: 100%;
        margin: 0;
      }

      [part='bar'] {
        position: relative;
        height: 20px;
        border-radius: 3px;
      }

      [part='axis'] {
        width: calc(100% - 45px);
        margin: 2px auto 0;
        display: block;
      }
    `
];
let t = h;
i([
  e({ type: Number })
], t.prototype, "value");
i([
  e({ type: Number })
], t.prototype, "min");
i([
  e({ type: Number })
], t.prototype, "max");
i([
  e({ type: Number })
], t.prototype, "center");
i([
  e({ type: Number })
], t.prototype, "precision");
i([
  e({ type: Boolean, attribute: "hide-text" })
], t.prototype, "hideText");
i([
  e({ type: Number, attribute: "num-tick-marks" })
], t.prototype, "numTickMarks");
i([
  e({ type: String })
], t.prototype, "unit");
customElements.get("frc-number-bar") || customElements.define("frc-number-bar", t);
export {
  t
};
