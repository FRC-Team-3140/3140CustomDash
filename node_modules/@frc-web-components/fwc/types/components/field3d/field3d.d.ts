import { LitElement, TemplateResult } from 'lit';
import { Scene, WebGLRenderer, PerspectiveCamera, Object3D, Group, Camera } from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { FieldConfig } from './field-configs';
import { Pose3d, IField3d, FieldObject } from './field-interfaces';
export default class Field3d extends LitElement implements IField3d {
    #private;
    fieldConfigs: FieldConfig[];
    objectConfigs: import('./field-interfaces').ObjectConfig[];
    urdfConfigs: import('./field-interfaces').UrdfConfig[];
    game: string;
    origin: 'red' | 'blue';
    backgroundColor: string;
    enableVR: boolean;
    assetPathPrefix?: string;
    cameraPose?: number[];
    fixedCamera: boolean;
    private ORBIT_FIELD_DEFAULT_TARGET;
    private ORBIT_FIELD_DEFAULT_POSITION;
    private WPILIB_ROTATION;
    private wpilibCoordinateGroup;
    private wpilibFieldCoordinateGroup;
    private cameraPoseObject;
    scene: Scene;
    renderer?: WebGLRenderer;
    camera: PerspectiveCamera;
    controls: OrbitControls;
    loader: GLTFLoader;
    fieldObject?: Object3D;
    canvas: HTMLCanvasElement;
    container: HTMLCanvasElement;
    private vrButton;
    static styles: import('lit').CSSResult;
    private getFieldConfig;
    private getCamera;
    static getOrbitControls(camera: Camera, canvas: HTMLElement): OrbitControls;
    static addLights(scene: Scene): void;
    private initRenderer;
    private initScene;
    private updateCanvasSize;
    static adjustMaterials(group: Group): void;
    static updatePose(object: Object3D, pose: Pose3d): void;
    private loadFieldModel;
    getFieldGroup(): Group;
    createFieldObject(config?: {
        onCreate?: (object: FieldObject) => unknown;
        onRemove?: (oobject: FieldObject) => unknown;
    }): FieldObject;
    firstUpdated(): void;
    updated(changedProps: Map<string, unknown>): void;
    renderField(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'frc-field3d': Field3d;
    }
}
