import { Group } from 'three';
export interface Rotation {
    axis: 'x' | 'y' | 'z';
    degrees: number;
}
export type Translation2d = [number, number];
export type Rotation2d = number;
export type Pose2d = {
    translation: Translation2d;
    rotation: Rotation2d;
};
export type Translation3d = [number, number, number];
export type Rotation3d = [number, number, number, number];
export type Pose3d = {
    translation: Translation3d;
    rotation: Rotation3d;
};
export interface ObjectConfig {
    name: string;
    src: string;
    rotations: Rotation[];
    position: [number, number, number];
    components?: {
        name: string;
        src: string;
        rotations: Rotation[];
        position: [number, number, number];
    }[];
}
export interface UrdfConfig {
    name: string;
    content?: string;
    src?: string;
    rotations: Rotation[];
    position: [number, number, number];
}
export declare class FieldObject {
    #private;
    constructor(field3d: IField3d, onCreate?: (object: FieldObject) => unknown, onRemove?: (oobject: FieldObject) => unknown);
    create(): void;
    getGroup(): Group;
    getField3d(): IField3d;
}
export interface IField3d {
    createFieldObject: (config?: {
        onCreate?: (object: FieldObject) => unknown;
        onRemove?: (oobject: FieldObject) => unknown;
    }) => FieldObject;
    getFieldGroup: () => Group;
    assetPathPrefix?: string;
    objectConfigs: ObjectConfig[];
    urdfConfigs: UrdfConfig[];
}
