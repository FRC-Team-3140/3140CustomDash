import { LitElement } from 'lit';
import { ILineChartAxis } from './line-chart-axis';
import { IChartLegend } from './line-chart-legend';
import * as d3 from 'd3';
interface ChartDatum {
    timeMs: number;
    value: number;
}
interface ChartData {
    data: ChartDatum[];
    color: string;
    hide: boolean;
    yAxis: number;
    displayName: string;
}
interface YScale {
    scale: d3.ScaleLinear<number, number, never>;
    chartAxis: ILineChartAxis;
}
export declare function getYScaleWidth(text: string): number;
export declare class LineChart extends LitElement {
    viewTime: number;
    chartTitle: string;
    data: ChartData[];
    path: SVGPathElement;
    svg: SVGSVGElement;
    xAxis: SVGSVGElement;
    chartContainer: HTMLDivElement;
    startTime: number;
    elapsedTimeMs: number;
    static styles: import('lit').CSSResult;
    firstUpdated(): void;
    getFilteredData(data: ChartDatum[]): ChartDatum[];
    updateChart(): void;
    static getYScale(height: number, chartData: ChartData[], chartAxis: ILineChartAxis): d3.ScaleLinear<number, number, never>;
    getDimensions(): {
        margin: {
            top: number;
            right: number;
            bottom: number;
            left: number;
        };
        svgWidth: number;
        svgHeight: number;
        width: number;
        height: number;
    };
    getYScales(): YScale[];
    static getPath(data: ChartDatum[], getX: (datum: ChartDatum) => number, getY: (datum: ChartDatum) => number): string;
    getLegend(): IChartLegend;
    render(): import('lit').TemplateResult<1>;
    renderLegend(): import('lit').TemplateResult<1>;
    renderChart(): import('lit').TemplateResult<2>;
    renderScales(yScales: YScale[], side: 'left' | 'right'): import('lit').TemplateResult<2>;
}
export default LineChart;
declare global {
    interface HTMLElementTagNameMap {
        'frc-line-chart': LineChart;
    }
}
