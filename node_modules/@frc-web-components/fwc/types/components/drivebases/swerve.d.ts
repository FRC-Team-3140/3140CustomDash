import { LitElement, TemplateResult } from 'lit';
import { WebbitConfig } from '@webbitjs/webbit';
export declare const swerveDrivebaseDashboardConfig: Partial<WebbitConfig>;
interface SwerveModule {
    location: [number, number];
    desiredRotation: number;
    desiredVelocity: number;
    measuredRotation: number;
    measuredVelocity: number;
}
export declare class SwerveDrivebase extends LitElement {
    moduleCount: number;
    wheelLocations: number[];
    measuredStates: number[];
    desiredStates: number[];
    robotRotation: number;
    maxSpeed: number;
    rotationUnit: string;
    sizeLeftRight: number;
    sizeFrontBack: number;
    private normalizedRotation;
    _svg: SVGSVGElement;
    _swerve: SVGGElement;
    _base: SVGRectElement;
    _modules: SVGGElement;
    static styles: import('lit').CSSResult;
    drawBase(): void;
    setSwerveRotation(): void;
    setSwerveOrigin(): void;
    getRobotRotationRad(): number;
    getSvgSize(): [number, number];
    getBaseSize(): [number, number];
    updated(changedProps: Map<string, unknown>): void;
    resized(): void;
    firstUpdated(): void;
    getSwerveModules(): SwerveModule[];
    renderModuleDirectionIndicator(clipId: string, desiredRotation: number, color: string): TemplateResult;
    renderModuleVelocityIndicator(id: string, rotation: number, velocity: number, color: string): TemplateResult;
    renderModules(): TemplateResult;
    renderWheelMask(): TemplateResult;
    renderArrow(): TemplateResult;
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'frc-swerve-drivebase': SwerveDrivebase;
    }
}
export {};
