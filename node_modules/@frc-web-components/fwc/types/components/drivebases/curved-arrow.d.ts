/**
 * Copyright (c) 2017-2018 FIRST
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of FIRST nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY FIRST AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY NONINFRINGEMENT AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FIRST OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * Generates the head of a straight arrow.
 */
export declare function straightHead(startAngle: number, size: number, xOffset: number, bodyLength: number): string;
/**
 * Creates a straight arrow, which is just a curved arrow with an infinite radius.
 *
 * @param length   the length of the arrow
 * @param angle    the angle of the arrow, in radians
 * @param xOffset  how much to offset the arrow along the X-axis
 * @param headSize the length of the head of the arrow
 */
export declare function createStraight(length: number, angle: number, xOffset: number, headSize: number): string;
/**
 * Generates the body arc of the arrow.
 *
 * @param startAngle the starting angle of the arc, in radians
 * @param radius     the radius of the arc
 * @param length     the length of the arc, in the same unit as {@code radius}
 * @param xOffset    how much to offset the arc along the X-axis
 */
export declare function makeBody(startAngle: number, radius: number, length: number, xOffset: number): string;
/**
 * Generates the head of a curved arrow.
 *
 * @param startAngle the starting angle of the arc, in radians
 * @param size       the length of the arrow head
 * @param arcRadius  the radius of the arc of the arrow
 * @param arcLength  the length of the arc of the arrow
 */
export declare function curvedHead(startAngle: number, size: number, arcRadius: number, xOffset: number, arcLength: number): string;
/**
 * Creates a new curved arrow.
 *
 * @param startAngle the starting angle of the arc, in radians
 * @param radius     the radius of the arrow. Must be non-negative.
 * @param length     the length of the arrow, in the same units as {@code radius}
 * @param xOffset    how much to offset the arc along the X-axis
 * @param headSize   the length of the head of the arrow
 *
 * @return a curved arrow shape
 *
 * @throws IllegalArgumentException if {@code radius} or {@code headSize} are negative
 */
export declare function create(startAngle: number, radius: number, length: number, xOffset: number, headSize: number): string;
/**
 * Creates a new curved arrow. This is equivalent to calling
 * {@link #create create(startAngle, radius, radius * sweepAngle, xOffset, headSize)}.
 *
 * @param startAngle the starting angle of the arc, in radians
 * @param radius     the radius of the arc
 * @param sweepAngle the sweep of the arc, in radians
 * @param xOffset    how much to offset the arc along the X-axis
 * @param headSize   the length of the head of the arrow
 *
 * @throws IllegalArgumentException if {@code radius} or {@code headSize} are negative
 */
export declare function createPolar(startAngle: number, radius: number, sweepAngle: number, xOffset: number, headSize: number): string;
