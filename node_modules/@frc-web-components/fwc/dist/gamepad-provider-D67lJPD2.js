import { T as d } from "./index.es-3BKgpzRw.js";
class f extends d {
  constructor() {
    super({}, 1e3 / 60);
    const o = () => {
      [...window.navigator.getGamepads()].forEach((u, t) => {
        if (!u) {
          this.removeSource(`/${t}/axes`), this.removeSource(`/${t}/connected`), this.removeSource(`/${t}/id`), this.removeSource(`/${t}/index`), this.removeSource(`/${t}/mapping`), this.removeSource(`/${t}/timestamp`), this.removeSource(`/${t}/buttonPresses`), this.removeSource(`/${t}/buttonTouches`), this.removeSource(`/${t}/buttonValues`);
          return;
        }
        const { axes: r, buttons: i, connected: S, id: n, mapping: v, timestamp: b } = u;
        this.updateSource(`/${t}/axes`, r), this.updateSource(`/${t}/connected`, S), this.updateSource(`/${t}/id`, n), this.updateSource(`/${t}/index`, t), this.updateSource(`/${t}/mapping`, v), this.updateSource(`/${t}/timestamp`, b), r.forEach((s, e) => {
          this.updateSource(`/${t}/axis/${e}`, s);
        });
        const a = [], c = [], p = [];
        i.forEach((s, e) => {
          const { pressed: h, touched: m, value: $ } = s;
          a.push(h), c.push(m), p.push($), this.updateSource(`/${t}/buttonPress/${e}`, h), this.updateSource(`/${t}/buttonTouch/${e}`, m), this.updateSource(`/${t}/buttonValue/${e}`, $);
        }), this.updateSource(`/${t}/buttonPresses`, a), this.updateSource(`/${t}/buttonTouches`, c), this.updateSource(`/${t}/buttonValues`, p);
      }), window.requestAnimationFrame(o);
    };
    window.requestAnimationFrame(o);
  }
}
export {
  f as G
};
