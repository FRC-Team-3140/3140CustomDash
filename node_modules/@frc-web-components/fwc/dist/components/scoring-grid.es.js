var $ = (t) => {
  throw TypeError(t);
};
var O = (t, r, e) => r.has(t) || $("Cannot " + e);
var k = (t, r, e) => r.has(t) ? $("Cannot add the same private member more than once") : r instanceof WeakSet ? r.add(t) : r.set(t, e);
var g = (t, r, e) => (O(t, r, "access private method"), e);
import { r as L, i as S, x as a, b as u, n as l } from "../property-C4BPH-wS.js";
import { r as B } from "../state-Cn3aen3G.js";
import { o as x } from "../style-map-CXHve4fi.js";
import { n as f } from "../when-CDK1Tt5Y.js";
var E = Object.defineProperty, b = (t, r, e, i) => {
  for (var s = void 0, o = t.length - 1, h; o >= 0; o--)
    (h = t[o]) && (s = h(r, e, s) || s);
  return s && E(r, e, s), s;
}, y, I;
const v = class v extends L {
  constructor() {
    super(...arguments);
    k(this, y);
    this.nodeId = 1, this.selected = !1, this.cones = 0, this.cubes = 0, this.background = "";
  }
  updated(e) {
    (e.has("selected") || e.has("nodeId")) && g(this, y, I).call(this);
  }
  render() {
    return a`
      <div style="text-align: center; margin-block:auto;">${this.nodeId}</div>

      <!-- empty on:click binding above passes click events to be bound on the Node component -->
      ${u`
        <svg
          viewBox="-2 -2 28 28"
          style="margin-right: 8px; width:100%; height:100%; pointer-events:none"
        >
          ${f(
      this.cubes > 1,
      () => u`
              <polygon
                points="8,8 8,20 20,20, 20,8"
                style="fill:rgb(150,0,255);stroke-width:1;stroke:rgb(0,0,0)"
              />
              <polygon
                points="4,4 4,16 16,16, 16,4"
                style="fill:rgb(150,0,255);stroke-width:1;stroke:rgb(0,0,0)"
              />
            `
    )}
          ${f(
      this.cubes === 1,
      () => u`
              <polygon
                points="6,6 6,18 18,18, 18,6"
                style="fill:rgb(150,0,255);stroke-width:1;stroke:rgb(0,0,0)"
              />
            `
    )}
          ${f(
      this.cones > 1,
      () => u`
              <polygon
                points="13,8 11,8 8,22 5,22 19,22 16,22"
                style="fill:rgb(255,200,0);stroke-width:1;stroke:rgb(0,0,0)"
              />
              <polygon
                points="13,4 11,4 8,18 5,18 19,18 16,18"
                style="fill:rgb(255,200,0);stroke-width:1;stroke:rgb(0,0,0)"
              />
            `
    )}
          
          ${f(
      this.cones === 1,
      () => u`
              <polygon
                points="13,6 11,6 8,20 5,20 19,20 16,20"
                style="fill:rgb(255,200,0);stroke-width:1;stroke:rgb(0,0,0)"
              />
            `
    )}  
        </svg>
      `}
    `;
  }
};
y = new WeakSet(), I = function() {
  this.selected ? this.background = "green" : this.nodeId >= 1 && this.nodeId <= 9 ? this.background = "lightgray" : (this.nodeId - 1) % 3 === 1 ? this.background = "purple" : this.background = "yellow", this.style.setProperty("background-color", this.background);
}, v.styles = S`
    :host {
      display: block;
      color: black;
      font-size: 2em;
      height: 100%;
      flex-grow: 1;
      border: 1px solid black;
      box-sizing: border-box;
    }
  `;
let c = v;
b([
  l({ type: Number, attribute: "node-id" })
], c.prototype, "nodeId");
b([
  l({ type: Boolean })
], c.prototype, "selected");
b([
  l({ type: Number })
], c.prototype, "cones");
b([
  l({ type: Number })
], c.prototype, "cubes");
b([
  B()
], c.prototype, "background");
customElements.get("frc-scoring-grid-node") || customElements.define("frc-scoring-grid-node", c);
var N = Object.defineProperty, d = (t, r, e, i) => {
  for (var s = void 0, o = t.length - 1, h; o >= 0; o--)
    (h = t[o]) && (s = h(r, e, s) || s);
  return s && N(r, e, s), s;
};
const D = {
  dashboard: {
    displayName: "Scoring Grid"
  },
  properties: {
    cubesScored: {
      type: "Array",
      attribute: "cubes-scored",
      input: { type: "NumberArray" }
    },
    conesScored: {
      type: "Array",
      attribute: "cones-scored",
      input: { type: "NumberArray" }
    },
    hideLinks: { type: "Boolean", attribute: "hide-links" },
    reverseRow: { type: "Boolean", attribute: "reverse-row" },
    reverseCol: { type: "Boolean", attribute: "reverse-col" }
  }
};
function m(t, r = !1) {
  return r ? 9 - (t - 1) % 9 : 1 + (t - 1) % 9;
}
function C(t, r = !1) {
  return r ? 3 - Math.floor((t - 1) / 9) : Math.floor((t - 1) / 9) + 1;
}
function _(t, r) {
  return Array.from(Array(r + 1).keys()).slice(t);
}
var p, R, A;
const w = class w extends L {
  constructor() {
    super(...arguments);
    k(this, p);
    this.selection = 0, this.cubesScored = [], this.conesScored = [], this.hideLinks = !1, this.reverseRow = !1, this.reverseCol = !1, this.leftOfLinks = [];
  }
  updated(e) {
    (e.has("cubesScored") || e.has("conesScored")) && g(this, p, A).call(this);
  }
  renderLinks() {
    return this.hideLinks ? a`` : a`
      ${this.leftOfLinks.map(
      (e) => a`
          <div
            class="link"
            style=${x({
        gridColumn: `${Math.min(
          m(e, this.reverseCol),
          m(e + 2, this.reverseCol)
        )} / span 3`,
        gridRow: C(e, this.reverseRow)
      })}
          ></div>
        `
    )}
    `;
  }
  render() {
    return a`
      <div class="grid">
        ${_(1, 27).map(
      (e) => a`
            <div
              style=${x({
        gridColumn: m(e, this.reverseCol),
        gridRow: C(e, this.reverseRow)
      })}
            >
              <frc-scoring-grid-node
                node-id=${e}
                ?selected=${this.selection === e}
                @click=${() => {
        g(this, p, R).call(this, e);
      }}
                cubes=${this.cubesScored.filter((i) => i === e).length}
                cones=${this.conesScored.filter((i) => i === e).length}
              >
              </frc-scoring-grid-node>
            </div>
          `
    )}
        ${this.renderLinks()}
      </div>
    `;
  }
};
p = new WeakSet(), R = function(e) {
  this.selection === e ? this.selection = 0 : this.selection = e;
  const i = new CustomEvent("select", {
    bubbles: !0,
    composed: !0,
    detail: { nodeId: this.selection }
  });
  this.dispatchEvent(i);
}, A = function() {
  const e = [], i = this.cubesScored.concat(this.conesScored);
  for (let s = 0; s < 3; s += 1)
    for (let o = 1; o <= 7; o += 1)
      i.includes(s * 9 + o) && i.includes(s * 9 + o + 1) && i.includes(s * 9 + o + 2) && (e.push(s * 9 + o), o += 2);
  this.leftOfLinks = e;
}, w.styles = S`
    :host {
      display: inline-block;
      width: 550px;
      height: 380px;
    }

    .grid {
      display:grid;
      grid-template-columns: repeat(9, calc(100% / 9));
      grid-template-rows: repeat(3, calc(100% / 3));
      height:100%;
      width:100%;
      flex-direction:row-reverse;
      grid-auto-flow: dense;"
    }

    .link {
      border: 5px solid black;
      border-radius: 10px;
      margin: 5px;
      box-sizing: border-box;
      pointer-events: none;
    }
  `;
let n = w;
d([
  l({ type: Number })
], n.prototype, "selection");
d([
  l({ type: Array, attribute: "cubes-scored" })
], n.prototype, "cubesScored");
d([
  l({ type: Array, attribute: "cones-scored" })
], n.prototype, "conesScored");
d([
  l({ type: Boolean, attribute: "hide-links" })
], n.prototype, "hideLinks");
d([
  l({ type: Boolean, attribute: "reverse-row" })
], n.prototype, "reverseRow");
d([
  l({ type: Boolean, attribute: "reverse-col" })
], n.prototype, "reverseCol");
d([
  B()
], n.prototype, "leftOfLinks");
customElements.get("frc-scoring-grid") || customElements.define("frc-scoring-grid", n);
export {
  n as ScoringGrid,
  n as default,
  D as scoringGridDashboardConfig
};
