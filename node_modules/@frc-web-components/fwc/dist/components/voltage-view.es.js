var y = Object.getPrototypeOf;
var l = Reflect.get;
var m = (a, p, o) => l(y(a), o, p);
import { i as f, n as t } from "../property-C4BPH-wS.js";
import { NumberBar as b } from "./number-bar.es.js";
var c = Object.defineProperty, r = (a, p, o, d) => {
  for (var i = void 0, s = a.length - 1, n; s >= 0; s--)
    (n = a[s]) && (i = n(p, o, i) || i);
  return i && c(p, o, i), i;
};
const k = {
  dashboard: {
    displayName: "Voltage View"
  },
  properties: {
    value: { type: "Number" },
    max: { type: "Number", defaultValue: 5 },
    min: { type: "Number" },
    center: { type: "Number" },
    precision: { type: "Number", defaultValue: 2 },
    hideText: { type: "Boolean", attribute: "hide-text" },
    numTickMarks: {
      type: "Number",
      defaultValue: 3,
      attribute: "num-tick-marks"
    },
    unit: { type: "String", defaultValue: "V" }
  }
}, u = class u extends b {
  constructor() {
    super(...arguments), this.value = 0, this.min = 0, this.max = 5, this.center = 0, this.precision = 2, this.hideText = !1, this.numTickMarks = 3, this.unit = "V";
  }
};
u.styles = [
  ...m(u, u, "styles"),
  f`
      [part='bar']::part(foreground) {
        background: var(--frc-voltage-view-foreground-color, #ffbd2f);
      }
    `
];
let e = u;
r([
  t({ type: Number })
], e.prototype, "value");
r([
  t({ type: Number })
], e.prototype, "min");
r([
  t({ type: Number })
], e.prototype, "max");
r([
  t({ type: Number })
], e.prototype, "center");
r([
  t({ type: Number })
], e.prototype, "precision");
r([
  t({ type: Boolean, attribute: "hide-text" })
], e.prototype, "hideText");
r([
  t({ type: Number, attribute: "num-tick-marks" })
], e.prototype, "numTickMarks");
r([
  t({ type: String })
], e.prototype, "unit");
customElements.get("frc-voltage-view") || customElements.define("frc-voltage-view", e);
export {
  e as VoltageView,
  e as default,
  k as voltageViewDashboardConfig
};
