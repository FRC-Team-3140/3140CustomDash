var f = (a) => {
  throw TypeError(a);
};
var E = (a, t, e) => t.has(a) || f("Cannot " + e);
var h = (a, t, e) => t.has(a) ? f("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(a) : t.set(a, e);
var m = (a, t, e) => (E(a, t, "access private method"), e);
import { r as x, i as S, x as c, n as o } from "../property-C4BPH-wS.js";
import { e as C } from "../query-BrpQj_Qi.js";
var k = Object.defineProperty, s = (a, t, e, y) => {
  for (var r = void 0, n = a.length - 1, d; n >= 0; n--)
    (d = a[n]) && (r = d(t, e, r) || r);
  return r && k(t, e, r), r;
};
const N = {
  dashboard: {
    displayName: "Checkbox Group",
    defaultHtml: `
      <frc-checkbox-group options='["1", "2", "3"]'>
      </frc-checkbox-group>
    `
  },
  properties: {
    disabled: { type: "Boolean", reflect: !0 },
    label: { type: "String" },
    options: { type: "Array" },
    selected: { type: "Array", changeEvent: "change", primary: !0 },
    direction: {
      type: "String",
      defaultValue: "vertical",
      input: {
        type: "StringDropdown",
        allowCustomValues: !1,
        getOptions() {
          return ["vertical", "horizontal"];
        }
      }
    }
  }
};
var u, $;
const g = class g extends x {
  constructor() {
    super(...arguments);
    h(this, u);
    this.disabled = !1, this.label = "", this.options = [], this.selected = [], this.direction = "vertical";
  }
  render() {
    return c`
      <vaadin-checkbox-group
        .disabled=${this.disabled}
        .label=${this.label}
        theme=${this.direction}
        .value=${this.selected}
      >
        ${this.options.map(
      (e) => c`
            <vaadin-checkbox value=${e} @change=${() => m(this, u, $).call(this)}
              >${e}</vaadin-checkbox
            >
          `
    )}
      </vaadin-checkbox-group>
    `;
  }
};
u = new WeakSet(), $ = function() {
  this.selected = this.element.value;
  const e = new CustomEvent("change", {
    bubbles: !0,
    composed: !0,
    detail: { selected: this.selected }
  });
  this.dispatchEvent(e);
}, g.styles = S`
    :host {
      display: inline-block;
    }
  `;
let i = g;
s([
  o({ type: Boolean })
], i.prototype, "disabled");
s([
  o({ type: String })
], i.prototype, "label");
s([
  o({ type: Array })
], i.prototype, "options");
s([
  o({ type: Array })
], i.prototype, "selected");
s([
  o({ type: String })
], i.prototype, "direction");
s([
  C("vaadin-checkbox-group")
], i.prototype, "element");
customElements.get("frc-checkbox-group") || customElements.define("frc-checkbox-group", i);
var V = Object.defineProperty, p = (a, t, e, y) => {
  for (var r = void 0, n = a.length - 1, d; n >= 0; n--)
    (d = a[n]) && (r = d(t, e, r) || r);
  return r && V(t, e, r), r;
};
const w = {
  dashboard: {
    displayName: "Radio Group",
    defaultHtml: `
      <frc-radio-group options='["1", "2", "3"]'>
      </frc-radio-group>
    `
  },
  properties: {
    disabled: { type: "Boolean", reflect: !0 },
    label: { type: "String" },
    options: { type: "Array" },
    selected: { type: "String", changeEvent: "change", primary: !0 },
    direction: {
      type: "String",
      defaultValue: "vertical",
      input: {
        type: "StringDropdown",
        allowCustomValues: !1,
        getOptions() {
          return ["vertical", "horizontal"];
        }
      }
    }
  }
};
var b, B;
const v = class v extends x {
  constructor() {
    super(...arguments);
    h(this, b);
    this.disabled = !1, this.label = "", this.options = [], this.selected = "", this.direction = "vertical";
  }
  render() {
    return c`
      <vaadin-radio-group
        @value-changed=${(e) => m(this, b, B).call(this, e)}
        .disabled=${this.disabled}
        .label=${this.label}
        theme=${this.direction}
        .value=${this.selected}
      >
        ${this.options.map(
      (e) => c`
            <vaadin-radio-button value=${e}>${e}</vaadin-radio-button>
          `
    )}
      </vaadin-radio-group>
    `;
  }
};
b = new WeakSet(), B = function(e) {
  this.selected = e.detail.value;
  const y = new CustomEvent("change", {
    bubbles: !0,
    composed: !0,
    detail: { selected: this.selected }
  });
  this.dispatchEvent(y);
}, v.styles = S`
    :host {
      display: inline-block;
    }
  `;
let l = v;
p([
  o({ type: Boolean })
], l.prototype, "disabled");
p([
  o({ type: String })
], l.prototype, "label");
p([
  o({ type: Array })
], l.prototype, "options");
p([
  o({ type: String })
], l.prototype, "selected");
p([
  o({ type: String })
], l.prototype, "direction");
customElements.get("frc-radio-group") || customElements.define("frc-radio-group", l);
const H = {
  "frc-checkbox-group": N,
  "frc-radio-group": w,
  "vaadin-combo-box": {
    dashboard: {
      displayName: "Combo Box",
      defaultHtml: `<vaadin-combo-box items='["Item 1", "Item 2"]' value="Item 1"></vaadin-combo-box>`
    },
    properties: {
      items: { type: "Array" },
      value: {
        type: "String",
        changeEvent: "value-changed",
        primary: !0
      },
      allowCustomValue: { type: "Boolean", attribute: "allow-custom-value" },
      label: { type: "String" },
      placeholder: { type: "String" },
      disabled: { type: "Boolean", reflect: !0 },
      readonly: { type: "Boolean", reflect: !0 }
    }
  },
  "vaadin-number-field": {
    dashboard: {
      displayName: "Number Field",
      defaultHtml: '<vaadin-number-field label="Label" value="0"></vaadin-number-field>'
    },
    properties: {
      value: {
        type: "Number",
        defaultValue: 0,
        primary: !0,
        reflect: !0,
        changeEvent: "change"
      },
      label: { type: "String" },
      placeholder: { type: "String" },
      min: { type: "Number" },
      max: { type: "Number" },
      step: { type: "Number", defaultValue: 1 },
      hasControls: { type: "Boolean" },
      clearButtonVisible: {
        type: "Boolean",
        attribute: "clear-button-visible"
      },
      disabled: { type: "Boolean" },
      readonly: { type: "Boolean" }
    }
  },
  "vaadin-text-field": {
    dashboard: {
      displayName: "Text Field",
      defaultHtml: '<vaadin-text-field label="Label"></vaadin-text-field>'
    },
    properties: {
      value: {
        type: "String",
        primary: !0,
        reflect: !0,
        changeEvent: "change"
      },
      label: { type: "String" },
      placeholder: { type: "String" },
      clearButtonVisible: {
        type: "Boolean",
        attribute: "clear-button-visible"
      },
      disabled: { type: "Boolean" },
      readonly: { type: "Boolean" }
    }
  }
};
export {
  i as CheckboxGroup,
  l as RadioGroup,
  N as checkboxGroupDashboardConfig,
  H as default,
  H as formElementDashboardConfigs,
  w as radioGroupDashboardConfig
};
