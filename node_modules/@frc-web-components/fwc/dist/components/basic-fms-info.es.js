import { r as f, i as l, x as n, n as s } from "../property-C4BPH-wS.js";
import "../icon-Dc8f99z4.js";
var h = Object.defineProperty, r = (i, c, p, T) => {
  for (var e = void 0, o = i.length - 1, m; o >= 0; o--)
    (m = i[o]) && (e = m(c, p, e) || e);
  return e && h(c, p, e), e;
};
const E = {
  dashboard: {
    displayName: "Basic FMS Info"
  },
  properties: {
    matchType: { type: "Number", attribute: "match-type" },
    matchNumber: { type: "Number", attribute: "match-number" },
    eventName: { type: "String", attribute: "event-name" },
    fmsControlData: { type: "Number", attribute: "fms-control-data" }
  }
}, u = 1, d = 2, b = 4, y = 8, g = 16, A = 32, D = ["Unknown", "Practice", "Qualification", "Elimination"], a = class a extends f {
  constructor() {
    super(...arguments), this.matchType = 0, this.matchNumber = 0, this.eventName = "", this.fmsControlData = 0;
  }
  getRobotState() {
    return this.isEnabled() ? this.isTest() ? "Test" : this.isAuto() ? "Autonomous" : "Teleoperated" : "Disabled";
  }
  isEnabled() {
    return !!(this.fmsControlData & u);
  }
  isAuto() {
    return !!(this.fmsControlData & d);
  }
  isTest() {
    return !!(this.fmsControlData & b);
  }
  isEmergencyStopped() {
    return !!(this.fmsControlData & y);
  }
  isFmsAttached() {
    return !!(this.fmsControlData & g);
  }
  isDsAttached() {
    return !!(this.fmsControlData & A);
  }
  render() {
    return n`
      <p>
        <strong>
          <span>${this.eventName}</span>
          <span>${D[this.matchType]}</span>
          <span>match ${this.matchNumber}</span>
        </strong>
      </p>

      <p style="margin-bottom: 7px; font-weight: normal">
        <span style="margin-right: 5px;">
          ${this.isFmsAttached() ? n`
                <span class="info">
                  <frc-icon icon="check" color="green"></frc-icon>
                  FMS connected
                </span>
              ` : n`
                <span class="info">
                  <frc-icon icon="close" color="red"></frc-icon>
                  FMS disconnected
                </span>
              `}
        </span>
        <span>
          ${this.isDsAttached() ? n`
                <span class="info">
                  <frc-icon icon="check" color="green"></frc-icon>
                  DriverStation connected
                </span>
              ` : n`
                <span class="info">
                  <frc-icon icon="close" color="red"></frc-icon>
                  DriverStation disconnected
                </span>
              `}
        </span>
      </p>
      <p style="font-weight: normal">Robot state: ${this.getRobotState()}</p>
    `;
  }
};
a.styles = l`
    p {
      margin: 5px 0;
    }
    p:first-child {
      margin-top: 0;
    }
    p:last-child {
      margin: 0;
    }
    :host {
      text-align: center;
      font-size: 15px;
      display: inline-flex;
      width: auto;
      flex-direction: column;
      justify-content: center;
      font-family: sans-serif;
      color: var(--frc-basic-fms-info-text-color, #000);
    }

    .info {
      display: inline-flex;
      align-items: center;
      gap: 3px;
    }
  `;
let t = a;
r([
  s({ type: Number, attribute: "match-type" })
], t.prototype, "matchType");
r([
  s({ type: Number, attribute: "match-number" })
], t.prototype, "matchNumber");
r([
  s({ type: String, attribute: "event-name" })
], t.prototype, "eventName");
r([
  s({ type: Number, attribute: "fms-control-data" })
], t.prototype, "fmsControlData");
customElements.get("frc-basic-fms-info") || customElements.define("frc-basic-fms-info", t);
export {
  t as BasicFmsInfo,
  E as basicFmsInfoDashboardConfig,
  t as default
};
