import { n as t } from "../property-C4BPH-wS.js";
import { NumberBar as s } from "./number-bar.es.js";
var n = Object.defineProperty, r = (u, p, o, c) => {
  for (var i = void 0, a = u.length - 1, m; a >= 0; a--)
    (m = u[a]) && (i = m(p, o, i) || i);
  return i && n(p, o, i), i;
};
const b = {
  dashboard: {
    displayName: "Accelerometer"
  },
  properties: {
    value: { type: "Number", primary: !0 },
    max: { type: "Number", defaultValue: 1 },
    min: { type: "Number", defaultValue: -1 },
    center: { type: "Number" },
    precision: { type: "Number", defaultValue: 2 },
    hideText: { type: "Boolean", attribute: "hide-text" },
    numTickMarks: {
      type: "Number",
      defaultValue: 3,
      attribute: "num-tick-marks"
    },
    unit: { type: "String", defaultValue: "g" }
  }
};
class e extends s {
  constructor() {
    super(...arguments), this.value = 0, this.min = -1, this.max = 1, this.center = 0, this.precision = 2, this.hideText = !1, this.numTickMarks = 3, this.unit = "g";
  }
}
r([
  t({ type: Number })
], e.prototype, "value");
r([
  t({ type: Number })
], e.prototype, "min");
r([
  t({ type: Number })
], e.prototype, "max");
r([
  t({ type: Number })
], e.prototype, "center");
r([
  t({ type: Number })
], e.prototype, "precision");
r([
  t({ type: Boolean, attribute: "hide-text" })
], e.prototype, "hideText");
r([
  t({ type: Number, attribute: "num-tick-marks" })
], e.prototype, "numTickMarks");
r([
  t({ type: String })
], e.prototype, "unit");
customElements.get("frc-accelerometer") || customElements.define("frc-accelerometer", e);
export {
  e as Accelerometer,
  b as accelerometerDashboardConfig,
  e as default
};
