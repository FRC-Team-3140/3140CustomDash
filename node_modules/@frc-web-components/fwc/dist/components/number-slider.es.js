var h = (t) => {
  throw TypeError(t);
};
var x = (t, i, e) => i.has(t) || h("Cannot " + e);
var p = (t, i, e) => i.has(t) ? h("Cannot add the same private member more than once") : i instanceof WeakSet ? i.add(t) : i.set(t, e);
var d = (t, i, e) => (x(t, i, "access private method"), e);
import { r as v, i as f, x as y, n as l } from "../property-C4BPH-wS.js";
var g = Object.defineProperty, m = (t, i, e, n) => {
  for (var a = void 0, o = t.length - 1, c; o >= 0; o--)
    (c = t[o]) && (a = c(i, e, a) || a);
  return a && g(i, e, a), a;
};
const $ = {
  dashboard: {
    displayName: "Number Slider"
  },
  properties: {
    value: { type: "Number", primary: !0, changeEvent: "change" },
    min: { type: "Number", defaultValue: -1 },
    max: { type: "Number", defaultValue: 1 },
    blockIncrement: {
      type: "Number",
      attribute: "block-increment",
      defaultValue: 0.05
    }
  }
};
var s, b;
const u = class u extends v {
  constructor() {
    super(...arguments);
    p(this, s);
    this.value = 0, this.min = -1, this.max = 1, this.blockIncrement = 0.05;
  }
  onChange(e) {
    this.value = parseFloat(e.target.value), d(this, s, b).call(this);
  }
  firstUpdated() {
    setTimeout(() => {
      const e = this.renderRoot.querySelector("#slider");
      e && (e.value = this.value);
    });
  }
  render() {
    const e = Math.min(this.min, this.max), n = Math.max(this.min, this.max), a = Math.max(e, Math.min(this.value, n));
    return y`
      <div class="slider-container">
        <input
          id="slider"
          type="range"
          .value="${a.toString()}"
          min="${e}"
          max="${n}"
          step="${this.blockIncrement}"
          @change="${this.onChange}"
        />

        <frc-axis ticks="5" min=${e} max=${n}></frc-axis>
      </div>
    `;
  }
};
s = new WeakSet(), b = function() {
  this.dispatchEvent(
    new CustomEvent("change", {
      detail: { value: this.value },
      bubbles: !0,
      composed: !0
    })
  );
}, u.styles = f`
    :host {
      display: inline-block;
      height: 50px;
      width: 300px;
    }

    .slider-container {
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 0 15px;
    }

    input {
      width: 100%;
    }

    table-axis {
      width: calc(85% - 14px);
      max-width: calc(100% - 74px);
      display: block;
    }
  `;
let r = u;
m([
  l({ type: Number })
], r.prototype, "value");
m([
  l({ type: Number })
], r.prototype, "min");
m([
  l({ type: Number })
], r.prototype, "max");
m([
  l({ type: Number, attribute: "block-increment" })
], r.prototype, "blockIncrement");
customElements.get("frc-number-slider") || customElements.define("frc-number-slider", r);
export {
  r as NumberSlider,
  r as default,
  $ as numberSliderDashboardConfig
};
