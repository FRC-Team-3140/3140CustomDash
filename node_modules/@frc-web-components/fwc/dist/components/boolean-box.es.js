import { r as f, i as b, x as c, n as a } from "../property-C4BPH-wS.js";
var d = Object.defineProperty, i = (n, r, l, p) => {
  for (var e = void 0, s = n.length - 1, u; s >= 0; s--)
    (u = n[s]) && (e = u(r, l, e) || e);
  return e && d(r, l, e), e;
};
const C = {
  dashboard: {
    displayName: "Boolean Box"
  },
  properties: {
    value: { type: "Boolean", primary: !0 },
    trueColor: {
      type: "String",
      input: { type: "ColorPicker" },
      defaultValue: "#00ff00",
      attribute: "true-color"
    },
    falseColor: {
      type: "String",
      input: { type: "ColorPicker" },
      defaultValue: "#ff0000",
      attribute: "false-color"
    },
    label: { type: "String" }
  }
};
var t;
const o = (t = class extends f {
  constructor() {
    super(...arguments), this.value = !1, this.falseColor = t.DEFAULT_FALSE_COLOR, this.trueColor = t.DEFAULT_TRUE_COLOR, this.label = "";
  }
  updated() {
    const r = this.falseColor || t.DEFAULT_FALSE_COLOR, l = this.trueColor || t.DEFAULT_TRUE_COLOR, p = this.renderRoot.querySelector(
      "[part=box]"
    ), e = this.value ? l : r;
    p.style.setProperty("--box-color", e);
  }
  render() {
    return c` <div part="box">${this.label || c`&nbsp;`}</div> `;
  }
}, t.DEFAULT_FALSE_COLOR = "#ff0000", t.DEFAULT_TRUE_COLOR = "#00ff00", t.styles = b`
    :host {
      display: inline-block;
      width: 80px;
      height: 80px;
      padding: 5px;
      box-sizing: border-box;
    }

    [part='box'] {
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-content: center;
      flex-wrap: wrap;
      background-color: var(--box-color);
      text-align: center;
    }
  `, t);
i([
  a({ type: Boolean })
], o.prototype, "value");
i([
  a({ type: String, attribute: "false-color" })
], o.prototype, "falseColor");
i([
  a({ type: String, attribute: "true-color" })
], o.prototype, "trueColor");
i([
  a({ type: String })
], o.prototype, "label");
let y = o;
customElements.get("frc-boolean-box") || customElements.define("frc-boolean-box", y);
export {
  y as BooleanBox,
  C as booleanBoxDashboardConfig,
  y as default
};
