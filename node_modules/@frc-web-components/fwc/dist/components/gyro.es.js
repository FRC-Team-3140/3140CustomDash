import { r as p, i as m, x as y, b, n as u } from "../property-C4BPH-wS.js";
import { e as d } from "../query-BrpQj_Qi.js";
import { s as h } from "../transform-DR-Bw75L.js";
function v(i, t, e) {
  i = +i, t = +t, e = (s = arguments.length) < 2 ? (t = i, i = 0, 1) : s < 3 ? 1 : +e;
  for (var n = -1, s = Math.max(0, Math.ceil((t - i) / e)) | 0, l = new Array(s); ++n < s; )
    l[n] = i + n * e;
  return l;
}
var k = Object.defineProperty, o = (i, t, e, n) => {
  for (var s = void 0, l = i.length - 1, a; l >= 0; l--)
    (a = i[l]) && (s = a(t, e, s) || s);
  return s && k(t, e, s), s;
};
const z = {
  dashboard: {
    displayName: "Gyro"
  },
  properties: {
    value: { type: "Number", primary: !0 },
    hideLabel: { type: "Boolean", attribute: "hide-label" },
    precision: { type: "Number", defaultValue: 2 },
    counterClockwise: { type: "Boolean", attribute: "counter-clockwise" },
    fromRadians: { type: "Boolean", attribute: "from-radians" }
  }
};
function x(i) {
  return i * Math.PI / 180;
}
function f(i) {
  return i * 180 / Math.PI;
}
function w(i, t, e) {
  return Math.min(e, Math.max(i, t));
}
function c(i, t = !1) {
  const e = x(-(i - 90));
  return [t ? -Math.cos(e) : Math.cos(e), Math.sin(e)];
}
const g = class g extends p {
  constructor() {
    super(...arguments), this.value = 0, this.hideLabel = !1, this.precision = 2, this.counterClockwise = !1, this.fromRadians = !1;
  }
  setLabels() {
    const t = this.getGyroRadius();
    h(this._labels).selectAll("text").data([0, 45, 90, 135, 180, -135, -90, -45]).join(
      (e) => e.append("text").attr("text-anchor", "middle").attr("alignment-baseline", "middle").attr("font-size", 15).attr("fill", "var(--frc-gyro-color, #000)").text((n) => `${n}Â°`)
    ).attr(
      "x",
      (e) => c(e, this.counterClockwise)[0] * (t + 30)
    ).attr(
      "y",
      (e) => -c(e, this.counterClockwise)[1] * (t + 30)
    );
  }
  setDialAngle() {
    const t = this.getGyroRadius(), e = this.fromRadians ? f(this.value) : this.value;
    h(this._dial).attr(
      "x2",
      c(e, this.counterClockwise)[0] * (t - 7)
    ).attr(
      "y2",
      -c(e, this.counterClockwise)[1] * (t - 7)
    );
  }
  addTicks(t, e, n, s) {
    const l = this.getGyroRadius();
    h(t).selectAll("line").data(v(0, 360, n)).join(
      (a) => a.append("line").attr("stroke", "var(--frc-gyro-color, #000)").attr("stroke-width", s)
    ).attr("x1", (a) => c(a)[0] * l).attr("y1", (a) => -c(a)[1] * l).attr(
      "x2",
      (a) => c(a)[0] * (l + e)
    ).attr(
      "y2",
      (a) => -c(a)[1] * (l + e)
    );
  }
  firstUpdated() {
    new ResizeObserver(() => {
      this.resized();
    }).observe(this), this.resized();
  }
  resized() {
    const t = this.getSize();
    h(this._svg).attr("width", t).attr("height", t), h(this._gyro).attr(
      "transform",
      `translate(${t / 2},${t / 2})`
    );
    const e = this.getGyroRadius();
    h(this._gyroEdge).attr("r", e), this.addTicks(this._minorTicks, 5, 5, 1), this.addTicks(this._majorTicks, 10, 45, 2), this.setLabels(), this.setDialAngle();
  }
  getSize() {
    const { width: t } = this.getBoundingClientRect();
    return t;
  }
  getGyroRadius() {
    return this.getSize() / 2 - 53;
  }
  updated(t) {
    (t.has("value") || t.has("fromRadians") || t.has("counterClockwise")) && this.setDialAngle(), t.has("counterClockwise") && this.setLabels();
  }
  render() {
    const e = `${(this.fromRadians ? f(this.value) : this.value).toFixed(w(this.precision, 0, 100))}`;
    return y`
      <div>
        ${b`
          <svg>
            <g class="gyro">
              <circle class="gyro-edge" stroke-width="2" stroke="var(--frc-gyro-color, #000)" style="fill: none"></circle>
              <g class="minor-ticks"></g>
              <g class="major-ticks"></g>
              <g class="labels"></g>
              <circle class="dial-circle" r="9"></circle>
              <line class="dial" x1="0" x2="0"></line>
            </g>
          </svg>
        `} ${this.hideLabel ? null : y`<label>${e}&deg</label> `}
      </div>
    `;
  }
};
g.styles = m`
    :host {
      font-family: sans-serif;
      display: inline-flex;
      flex-direction: column;
      align-items: center;
      position: relative;
      width: 300px;
      height: auto;
    }

    svg {
      width: 100%;
    }

    label {
      color: var(--frc-gyro-color, #000);
      text-align: center;
      display: block;
      font-size: 16px;
    }

    .dial-circle {
      fill: var(--frc-gyro-dial-color, blue);
    }

    .dial {
      stroke: var(--frc-gyro-dial-color, blue);
      stroke-width: 3;
    }
  `;
let r = g;
o([
  u({ type: Number })
], r.prototype, "value");
o([
  u({ type: Boolean, attribute: "hide-label" })
], r.prototype, "hideLabel");
o([
  u({ type: Number })
], r.prototype, "precision");
o([
  u({ type: Boolean, attribute: "counter-clockwise" })
], r.prototype, "counterClockwise");
o([
  u({ type: Boolean, attribute: "from-radians" })
], r.prototype, "fromRadians");
o([
  d("svg")
], r.prototype, "_svg");
o([
  d(".dial")
], r.prototype, "_dial");
o([
  d(".gyro")
], r.prototype, "_gyro");
o([
  d(".gyro-edge")
], r.prototype, "_gyroEdge");
o([
  d(".minor-ticks")
], r.prototype, "_minorTicks");
o([
  d(".major-ticks")
], r.prototype, "_majorTicks");
o([
  d(".labels")
], r.prototype, "_labels");
customElements.get("frc-gyro") || customElements.define("frc-gyro", r);
export {
  r as Gyro,
  r as default,
  z as gyroDashboardConfig
};
