import { r as p, i as c, x as b, n as i } from "../property-C4BPH-wS.js";
var m = Object.defineProperty, d = (a, o, n, f) => {
  for (var e = void 0, s = a.length - 1, l; s >= 0; s--)
    (l = a[s]) && (e = l(o, n, e) || e);
  return e && m(o, n, e), e;
};
const h = {
  dashboard: {
    displayName: "Encoder"
  },
  properties: {
    distance: { type: "Number" },
    speed: { type: "Number" }
  }
}, t = class t extends p {
  constructor() {
    super(...arguments), this.distance = 0, this.speed = 0;
  }
  render() {
    return b`
      <label class="distance-label">Distance</label>
      <span>${this.distance}</span>
      <label class="speed-label">Speed</label>
      <span>${this.speed}</span>
    `;
  }
};
t.styles = c`
    :host {
      display: inline-grid;
      grid-template-columns: min-content auto;
      grid-template-rows: 50% 50%;
      column-gap: 15px;
      row-gap: 5px;
      align-items: center;
      width: 250px;
      font-family: sans-serif;
    }

    label {
      font-weight: bold;
      text-align: right;
      color: var(--frc-encoder-label-color, #000);
    }

    span {
      width: 100%;
      min-width: 50px;
      display: inline-block;
      padding: 5px;
      border: 1px dashed;
      border-color: var(--frc-encoder-value-color, #666);
      color: var(--frc-encoder-value-color, #666);
      border-radius: 3px;
      box-sizing: border-box;
    }
  `;
let r = t;
d([
  i({ type: Number })
], r.prototype, "distance");
d([
  i({ type: Number })
], r.prototype, "speed");
customElements.get("frc-encoder") || customElements.define("frc-encoder", r);
export {
  r as Encoder,
  r as default,
  h as encoderDashboardConfig
};
