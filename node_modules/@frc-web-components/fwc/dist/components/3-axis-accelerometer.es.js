import { r as l, i as u, x as n, n as t } from "../property-C4BPH-wS.js";
import "./accelerometer.es.js";
import "./bar.es.js";
import "./axis.es.js";
var d = Object.defineProperty, r = (s, i, o, h) => {
  for (var a = void 0, p = s.length - 1, c; p >= 0; p--)
    (c = s[p]) && (a = c(i, o, a) || a);
  return a && d(i, o, a), a;
};
const N = {
  dashboard: {
    displayName: "3-Axis Accelerometer"
  },
  properties: {
    x: { type: "Number" },
    y: { type: "Number" },
    z: { type: "Number" },
    max: { type: "Number", defaultValue: 1 },
    min: { type: "Number", defaultValue: -1 },
    center: { type: "Number" },
    precision: { type: "Number", defaultValue: 2 },
    hideText: { type: "Boolean", attribute: "hide-text" },
    numTickMarks: {
      type: "Number",
      defaultValue: 3,
      attribute: "num-tick-marks"
    },
    unit: { type: "String", defaultValue: "g" }
  }
}, m = class m extends l {
  constructor() {
    super(...arguments), this.x = 0, this.y = 0, this.z = 0, this.min = -1, this.max = 1, this.center = 0, this.precision = 2, this.hideText = !1, this.numTickMarks = 3, this.unit = "g";
  }
  renderAccelerometer(i, o) {
    return n`
      <div part="accelerometer">
        <label part="label">${i}</label>
        <frc-accelerometer
          part="${i}"
          value="${this[i] || 0}"
          min="${this.min}"
          max="${this.max}"
          center="${this.center}"
          precision="${this.precision}"
          ?hide-text="${this.hideText}"
          num-tick-marks="${o}"
          unit="${this.unit}"
        ></frc-accelerometer>
      </div>
    `;
  }
  render() {
    return n`
      ${this.renderAccelerometer("x", 0)} ${this.renderAccelerometer("y", 0)}
      ${this.renderAccelerometer("z", this.numTickMarks)}
    `;
  }
};
m.styles = u`
    :host {
      display: inline-flex;
      flex-direction: column;
      height: auto;
      font-family: sans-serif;
      width: 300px;
    }

    [part='accelerometer'] {
      width: 100%;
      display: flex;
      gap: 8px;
      align-items: center;
      margin-bottom: 10px;
    }

    [part='accelerometer']:last-child {
      margin-bottom: 0;
    }

    [part='accelerometer'] label {
      width: 10px;
      padding-top: 2px;
      font-weight: bold;
      text-transform: uppercase;
      color: var(--frc-3-axis-accelerometer-label-color, #000);
    }

    frc-accelerometer {
      width: 100%;
      flex: 1;
    }

    frc-accelerometer::part(bar) {
      width: 100%;
      margin: 0;
    }
  `;
let e = m;
r([
  t({ type: Number })
], e.prototype, "x");
r([
  t({ type: Number })
], e.prototype, "y");
r([
  t({ type: Number })
], e.prototype, "z");
r([
  t({ type: Number })
], e.prototype, "min");
r([
  t({ type: Number })
], e.prototype, "max");
r([
  t({ type: Number })
], e.prototype, "center");
r([
  t({ type: Number })
], e.prototype, "precision");
r([
  t({ type: Boolean, attribute: "hide-text" })
], e.prototype, "hideText");
r([
  t({ type: Number, attribute: "num-tick-marks" })
], e.prototype, "numTickMarks");
r([
  t({ type: String })
], e.prototype, "unit");
customElements.get("frc-3-axis-accelerometer") || customElements.define("frc-3-axis-accelerometer", e);
export {
  e as ThreeAxisAccelerometer,
  e as default,
  N as threeAxisAccelerometerDashboardConfig
};
