var $ = (i) => {
  throw TypeError(i);
};
var E = (i, r, e) => r.has(i) || $("Cannot " + e);
var v = (i, r, e) => r.has(i) ? $("Cannot add the same private member more than once") : r instanceof WeakSet ? r.add(i) : r.set(i, e);
var f = (i, r, e) => (E(i, r, "access private method"), e);
import { r as w, i as C, x as c, n as o } from "../property-C4BPH-wS.js";
import { e as _ } from "../query-BrpQj_Qi.js";
import "../icon-Dc8f99z4.js";
var D = Object.defineProperty, h = (i, r, e, u) => {
  for (var t = void 0, s = i.length - 1, l; s >= 0; s--)
    (l = i[s]) && (t = l(r, e, t) || t);
  return t && D(r, e, t), t;
};
const z = {
  dashboard: {
    displayName: "Sendable Chooser",
    topLevel: !1
  },
  properties: {
    options: { type: "Array" },
    selected: { type: "String", input: { type: "StringDropdown" } },
    default: { type: "String" },
    active: { type: "String" },
    label: { type: "String", defaultValue: "Auto Choices" }
  }
};
var y, k;
const x = class x extends w {
  constructor() {
    super(...arguments);
    v(this, y);
    this.options = [], this.selected = "", this.default = "", this.active = "", this.label = "Auto Choices";
  }
  onChange() {
    this.selected = this.selectElement.value, f(this, y, k).call(this);
  }
  render() {
    return c`
      <div class="container">
        ${this.label ? c` <p>${this.label}</p> ` : ""}
        <div class="input-container">
          <label>
            <select @change=${this.onChange} .value=${this.selected}>
              ${this.options.map(
      (e) => c`
                  <option value=${e} ?selected=${this.selected === e}>
                    ${e}
                  </option>
                `
    )}
            </select>
          </label>
          ${this.options.length > 0 ? c`
                ${this.selected === this.active ? c`<frc-icon icon="check" color="green"></frc-icon>` : c`<frc-icon icon="close" color="red"></frc-icon>`}
              ` : ""}
        </div>
      </div>
    `;
  }
};
y = new WeakSet(), k = function() {
  this.dispatchEvent(
    new CustomEvent("change", {
      detail: { selected: this.selected },
      bubbles: !0,
      composed: !0
    })
  );
}, x.styles = C`
    :host {
      display: inline-block;
      min-width: 220px;
      font-family: sans-serif;
    }

    .input-container {
      display: flex;
      align-items: flex-end;
      gap: 7px;
      width: 100%;
    }

    frc-icon {
      width: 20px;
      height: 20px;
      margin-bottom: 12px;
    }

    label {
      position: relative;
      display: inline-block;
      width: 100%;
    }

    label:after {
      content: ' ';
      position: absolute;
      right: 15px;
      top: 46%;
      margin-top: -3px;
      z-index: 2;
      pointer-events: none;
      width: 0;
      height: 0;
      border-style: solid;
      border-width: 6.9px 4px 0 4px;
      border-color: #aaa transparent transparent transparent;
      pointer-events: none;
    }

    select {
      width: 100%;
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
      outline: 0 none;

      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      padding: 0 30px 0 10px;

      border: 1px solid #e0e0e0;
      border-radius: 3px;
      line-height: 36px;
      height: 36px;
      background: #fff;
      margin: 0 5px 5px 0;
    }

    p {
      color: var(--frc-sendable-chooser-label-color, black);
      margin: 0;
      font-size: 13px;
      padding-left: 3px;
    }

    .container {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }
  `;
let p = x;
h([
  o({ type: Array })
], p.prototype, "options");
h([
  o({ type: String, reflect: !0 })
], p.prototype, "selected");
h([
  o({ type: String })
], p.prototype, "default");
h([
  o({ type: String })
], p.prototype, "active");
h([
  o({ type: String, reflect: !0 })
], p.prototype, "label");
h([
  _("select", !0)
], p.prototype, "selectElement");
customElements.get("frc-sendable-chooser") || customElements.define("frc-sendable-chooser", p);
var K = Object.defineProperty, a = (i, r, e, u) => {
  for (var t = void 0, s = i.length - 1, l; s >= 0; s--)
    (l = i[s]) && (t = l(r, e, t) || t);
  return t && K(r, e, t), t;
};
const L = {
  defaultSourceKey: "/SmartDashboard/Auto choices",
  defaultSourceProvider: "NetworkTables",
  dashboard: {
    displayName: "Sendable Chooser"
  },
  properties: {
    options: { type: "Array" },
    selected: { type: "String", input: { type: "StringDropdown" } },
    default: { type: "String" },
    active: { type: "String" },
    label: { type: "String", defaultValue: "Auto Choices" },
    provider: { type: "SourceProvider", property: "provider" },
    store: { type: "Store", property: "store" },
    sourceProvider: {
      type: "String",
      attribute: "source-provider",
      input: { type: "None" }
    },
    sourceKey: {
      type: "String",
      attribute: "source-key",
      input: { type: "None" }
    }
  }
};
var d, m, P;
const S = class S extends w {
  constructor() {
    super(...arguments);
    v(this, d);
    this.options = [], this.selected = "", this.default = "", this.active = "", this.label = "Auto Choices", this.sourceProvider = "", this.sourceKey = "";
  }
  updated(e) {
    e.has("default") && (this.options.includes(this.selected) || f(this, d, m).call(this));
  }
  render() {
    return c`
      <frc-sendable-chooser
        @change=${f(this, d, P)}
        .options=${this.options}
        .selected=${this.selected}
        .default=${this.default}
        .active=${this.active}
        .label=${this.label}
      ></frc-sendable-chooser>
    `;
  }
};
d = new WeakSet(), m = function() {
  const {
    provider: e,
    store: u,
    sourceProvider: t,
    sourceKey: s,
    default: l
  } = this;
  if (!e || !u || !t || !s)
    return;
  const g = u.getSource(t, s), b = u.getSource(
    t,
    `${s}/selected`
  );
  if (g != null && g.hasChildren() && !(b != null && b.hasValue())) {
    const A = this.options.includes(this.selected) ? this.selected : l;
    e.userUpdate(`${s}/selected`, A);
  }
}, P = function(e) {
  this.selected = e.detail.selected, f(this, d, m).call(this);
}, S.styles = C`
    :host {
      display: inline-block;
      min-width: 220px;
      font-family: sans-serif;
    }

    frc-sendable-chooser {
      width: 100%;
      height: 100%;
    }
  `;
let n = S;
a([
  o({ type: Array })
], n.prototype, "options");
a([
  o({ type: String, reflect: !0 })
], n.prototype, "selected");
a([
  o({ type: String })
], n.prototype, "default");
a([
  o({ type: String })
], n.prototype, "active");
a([
  o({ type: String, reflect: !0 })
], n.prototype, "label");
a([
  o({ type: Object, attribute: !1 })
], n.prototype, "provider");
a([
  o({ type: Object, attribute: !1 })
], n.prototype, "store");
a([
  o({ type: String, attribute: "source-provider" })
], n.prototype, "sourceProvider");
a([
  o({ type: String, attribute: "source-key" })
], n.prototype, "sourceKey");
customElements.get("frc-sendable-chooser-wrapper") || customElements.define("frc-sendable-chooser-wrapper", n);
export {
  p as SendableChooser,
  n as SendableChooserWrapper,
  L as sendableChooserDashboardConfig,
  z as sendableChooserOldDashboardConfig
};
