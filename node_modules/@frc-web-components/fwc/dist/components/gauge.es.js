import { r as ue, i as se, x as le, n as _ } from "../property-C4BPH-wS.js";
import { e as ge } from "../query-BrpQj_Qi.js";
import { g as oe } from "../_commonjsHelpers-DaMA6jEr.js";
var N = { exports: {} }, ce = N.exports, X;
function fe() {
  return X || (X = 1, function(A) {
    (function(r, g) {
      var x = g(r);
      A.exports ? A.exports = x : r.Gauge = x;
    })(typeof window > "u" ? ce : window, function(r, g) {
      var x = r.document, o = Array.prototype.slice, w = r.requestAnimationFrame || r.mozRequestAnimationFrame || r.webkitRequestAnimationFrame || r.msRequestAnimationFrame || function(d) {
        return setTimeout(d, 1e3 / 60);
      };
      function G(d) {
        var V = d.duration, M = 1, q = 60 * V, h = d.start || 0, k = d.end, E = k - h, D = d.step, z = d.easing || function(t) {
          return (t /= 0.5) < 1 ? 0.5 * Math.pow(t, 3) : 0.5 * (Math.pow(t - 2, 3) + 2);
        };
        function S() {
          var a = M / q, t = E * z(a) + h;
          D(t, M), M += 1, a < 1 && w(S);
        }
        w(S);
      }
      var U = /* @__PURE__ */ function() {
        var d = "http://www.w3.org/2000/svg", V = {
          centerX: 50,
          centerY: 50
        }, M = {
          dialRadius: 40,
          dialStartAngle: 135,
          dialEndAngle: 45,
          value: 0,
          max: 100,
          min: 0,
          valueDialClass: "value",
          valueClass: "value-text",
          dialClass: "dial",
          gaugeClass: "gauge",
          showValue: !0,
          gaugeColor: null,
          label: function(a) {
            return Math.round(a);
          }
        };
        function q() {
          var a = arguments[0], t = o.call(arguments, 1);
          return t.forEach(function(e) {
            for (var n in e)
              e.hasOwnProperty(n) && (a[n] = e[n]);
          }), a;
        }
        function h(a, t, e) {
          var n = x.createElementNS(d, a);
          for (var i in t)
            n.setAttribute(i, t[i]);
          return e && e.forEach(function(b) {
            n.appendChild(b);
          }), n;
        }
        function k(a, t) {
          return a * t / 100;
        }
        function E(a, t, e) {
          var n = Number(a);
          return n > e ? e : n < t ? t : n;
        }
        function D(a, t, e) {
          var n = e - t, i = a - t;
          return 100 * i / n;
        }
        function z(a, t, e, n) {
          var i = n * Math.PI / 180;
          return {
            x: Math.round((a + e * Math.cos(i)) * 1e3) / 1e3,
            y: Math.round((t + e * Math.sin(i)) * 1e3) / 1e3
          };
        }
        function S(a, t, e) {
          var n = V.centerX, i = V.centerY;
          return {
            end: z(n, i, a, e),
            start: z(n, i, a, t)
          };
        }
        return function(t, e) {
          e = q({}, M, e);
          var n = t, i = e.max, b = e.min, s = E(e.value, b, i), F = e.dialRadius, J = e.showValue, c = e.dialStartAngle, C = e.dialEndAngle, K = e.valueDialClass, Q = e.valueClass;
          e.valueLabelClass;
          var Z = e.dialClass, ee = e.gaugeClass, I = e.color, O, p, te = e.label, ae = e.viewBox, P;
          if (c < C) {
            console.log("WARN! startAngle < endAngle, Swapping");
            var ne = c;
            c = C, C = ne;
          }
          function j(u, m, f, l) {
            var v = S(u, m, f), L = v.start, W = v.end, ie = typeof l > "u" ? 1 : l;
            return [
              "M",
              L.x,
              L.y,
              "A",
              u,
              u,
              0,
              ie,
              1,
              W.x,
              W.y
            ].join(" ");
          }
          function re(u) {
            O = h("text", {
              x: 50,
              y: 50,
              fill: "#999",
              class: Q,
              "font-size": "100%",
              "font-family": "sans-serif",
              "font-weight": "normal",
              "text-anchor": "middle",
              "alignment-baseline": "middle",
              "dominant-baseline": "central"
            }), p = h("path", {
              class: K,
              fill: "none",
              stroke: "#666",
              "stroke-width": 2.5,
              d: j(F, c, c)
              // value of 0
            });
            var m = k(100, 360 - Math.abs(c - C)), f = m <= 180 ? 0 : 1, l = h("svg", { viewBox: ae || "0 0 100 100", class: ee }, [
              h("path", {
                class: Z,
                fill: "none",
                stroke: "#eee",
                "stroke-width": 2,
                d: j(F, c, C, f)
              }),
              h("g", { class: "text-container" }, [O]),
              p
            ]);
            u.appendChild(l);
          }
          function B(u, m) {
            var f = D(u, b, i), l = k(f, 360 - Math.abs(c - C)), v = l <= 180 ? 0 : 1;
            J && (O.textContent = te.call(e, u)), p.setAttribute("d", j(F, c, l + c, v));
          }
          function H(u, m) {
            var f = I.call(e, u), l = m * 1e3, v = "stroke " + l + "ms ease";
            p.style.stroke = f, p.style["-webkit-transition"] = v, p.style["-moz-transition"] = v, p.style.transition = v;
          }
          return P = {
            setMaxValue: function(u) {
              i = u, B(s);
            },
            setValue: function(u) {
              s = E(u, b, i), I && H(s, 0), B(s);
            },
            setValueAnimated: function(u, m) {
              var f = s;
              s = E(u, b, i), f !== s && (I && H(s, m), G({
                start: f || 0,
                end: s,
                duration: m || 1,
                step: function(l, v) {
                  B(l);
                }
              }));
            },
            getValue: function() {
              return s;
            }
          }, re(n), P.setValue(s), P;
        };
      }();
      return U;
    });
  }(N)), N.exports;
}
var T, Y;
function de() {
  return Y || (Y = 1, T = fe()), T;
}
var me = de();
const ve = /* @__PURE__ */ oe(me);
var he = Object.defineProperty, R = (A, r, g, x) => {
  for (var o = void 0, w = A.length - 1, G; w >= 0; w--)
    (G = A[w]) && (o = G(r, g, o) || o);
  return o && he(r, g, o), o;
};
const we = {
  dashboard: {
    displayName: "Gauge"
  },
  properties: {
    min: { type: "Number" },
    max: { type: "Number", defaultValue: 100 },
    value: { type: "Number", primary: !0 }
  }
}, $ = class $ extends ue {
  constructor() {
    super(...arguments), this.min = 0, this.max = 100, this.value = 0;
  }
  setSize() {
    const r = this.getBoundingClientRect(), g = r.width, x = r.height, o = Math.min(g, x);
    this.gaugeElement.style.width = `${o}px`;
  }
  gaugeInit() {
    this.gaugeElement.innerHTML = "", this.gauge = ve(this.gaugeElement, {
      min: Math.min(this.min, this.max),
      max: Math.max(this.min, this.max)
    }), this.setSize();
  }
  firstUpdated() {
    this.gaugeInit(), new ResizeObserver(() => this.setSize()).observe(this);
  }
  updated(r) {
    var g;
    (r.has("min") || r.has("max")) && this.gaugeInit(), (g = this.gauge) == null || g.setValue(this.value);
  }
  render() {
    return le`
      <div class="gauge-container-container">
        <div id="gauge" class="gauge-container"></div>
      </div>
    `;
  }
};
$.styles = se`
    :host {
      display: inline-block;
      width: 200px;
      height: 200px;
    }

    .gauge-container-container {
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    .gauge-container {
      display: block;
    }

    .gauge-container > .gauge > .dial {
      stroke: #ddd;
      stroke-width: 3;
      fill: rgba(0, 0, 0, 0);
      stroke: var(--frc-gauge-color, rgb(221, 221, 221));
    }
    .gauge-container > .gauge > .value {
      stroke: var(--frc-gauge-fill-color, rgb(47, 180, 200));
      stroke-width: 3;
      fill: rgba(0, 0, 0, 0);
    }
    .gauge-container > .gauge .value-text {
      fill: var(--frc-gauge-text-color, rgb(100, 100, 100));
      font-family: sans-serif;
      font-size: 1em;
    }
  `;
let y = $;
R([
  _({ type: Number })
], y.prototype, "min");
R([
  _({ type: Number })
], y.prototype, "max");
R([
  _({ type: Number })
], y.prototype, "value");
R([
  ge("#gauge")
], y.prototype, "gaugeElement");
customElements.get("frc-gauge") || customElements.define("frc-gauge", y);
export {
  y as Gauge,
  y as default,
  we as gaugeDashboardConfig
};
