import { r as h, i as c, x as u, n as e } from "../property-C4BPH-wS.js";
import "./bar.es.js";
import "./axis.es.js";
var l = Object.defineProperty, i = (n, r, a, y) => {
  for (var s = void 0, p = n.length - 1, o; p >= 0; p--)
    (o = n[p]) && (s = o(r, a, s) || s);
  return s && l(r, a, s), s;
};
const k = {
  dashboard: {
    displayName: "Number Bar"
  },
  properties: {
    value: { type: "Number", primary: !0 },
    max: { type: "Number", defaultValue: 1 },
    min: { type: "Number", defaultValue: -1 },
    center: { type: "Number" },
    precision: { type: "Number", defaultValue: 2 },
    hideText: { type: "Boolean", attribute: "hide-text" },
    numTickMarks: {
      type: "Number",
      defaultValue: 3,
      attribute: "num-tick-marks"
    },
    unit: { type: "String" }
  }
};
function b(n, r, a) {
  return Math.min(a, Math.max(n, r));
}
const m = class m extends h {
  constructor() {
    super(...arguments), this.value = 0, this.min = -1, this.max = 1, this.center = 0, this.precision = 2, this.hideText = !1, this.numTickMarks = 3, this.unit = "";
  }
  render() {
    const r = Math.min(this.min, this.max), a = Math.max(this.min, this.max);
    return u`
      <frc-bar
        value="${this.value}"
        min="${r}"
        max="${a}"
        center="${this.center}"
        part="bar"
      >
        ${this.hideText ? "" : u`
              ${this.value.toFixed(b(this.precision, 0, 100))} ${this.unit}
            `}
      </frc-bar>
      ${this.numTickMarks > 0 ? u`
            <frc-axis
              part="axis"
              ticks="${this.numTickMarks}"
              min=${r}
              max=${a}
              unit="${this.unit}"
            ></frc-axis>
          ` : ""}
    `;
  }
};
m.styles = [
  c`
      :host {
        display: inline-block;
        width: 300px;
        height: auto;
        font-family: sans-serif;
      }

      [part='bar'] {
        width: 100%;
        margin: 0;
      }

      [part='bar'] {
        position: relative;
        height: 20px;
        border-radius: 3px;
      }

      [part='axis'] {
        width: calc(100% - 45px);
        margin: 2px auto 0;
        display: block;
      }
    `
];
let t = m;
i([
  e({ type: Number })
], t.prototype, "value");
i([
  e({ type: Number })
], t.prototype, "min");
i([
  e({ type: Number })
], t.prototype, "max");
i([
  e({ type: Number })
], t.prototype, "center");
i([
  e({ type: Number })
], t.prototype, "precision");
i([
  e({ type: Boolean, attribute: "hide-text" })
], t.prototype, "hideText");
i([
  e({ type: Number, attribute: "num-tick-marks" })
], t.prototype, "numTickMarks");
i([
  e({ type: String })
], t.prototype, "unit");
customElements.get("frc-number-bar") || customElements.define("frc-number-bar", t);
export {
  t as NumberBar,
  t as default,
  k as numberBarDashboardConfig
};
