import { r as a, i as p, x as h, n as d } from "../property-C4BPH-wS.js";
var g = Object.defineProperty, b = (l, e, i, r) => {
  for (var t = void 0, o = l.length - 1, n; o >= 0; o--)
    (n = l[o]) && (t = n(e, i, t) || t);
  return t && g(e, i, t), t;
};
const w = {
  dashboard: {
    displayName: "Toggle Switch"
  },
  properties: {
    toggled: { type: "Boolean", primary: !0, changeEvent: "toggle" }
  }
}, c = class c extends a {
  constructor() {
    super(...arguments), this.toggled = !1;
  }
  firstUpdated() {
    new ResizeObserver(() => this.resized()).observe(this);
  }
  resized() {
    const e = this.getBoundingClientRect(), { width: i, height: r } = e, t = this.renderRoot.querySelector("[part=switch]");
    t && (t.style.borderRadius = `${i}px`, t.style.setProperty("--circle-width", `${r * 0.8}px`), t.style.setProperty("--circle-height", `${r * 0.8}px`), t.style.setProperty(
      "--circle-left",
      `${i / 2 - r * 0.8}px`
    ), t.style.setProperty("--circle-top", `${r * 0.1}px`), t.style.setProperty("--circle-translate-x", `${i - r}px`));
  }
  onClick() {
    this.toggled = !this.toggled;
    const e = new CustomEvent("toggle", {
      detail: {
        toggled: this.toggled
      },
      bubbles: !0,
      composed: !0
    });
    this.dispatchEvent(e);
  }
  render() {
    return h`
      <label class="switch" @click="${this.onClick}">
        <input type="checkbox" .checked="${this.toggled}" disabled />
        <span part="switch">
          <span part="knob"></span>
        </span>
      </label>
    `;
  }
};
c.styles = p`
    :host {
      display: inline-block;
      width: 60px;
      height: 34px;
    }
    .switch {
      position: relative;
      display: inline-block;
      width: 100%;
      height: 100%;
      margin-bottom: 0;
    }
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    [part='switch'] {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--frc-toggle-switch-color, #ccc);
      -webkit-transition: 0.4s;
      transition: 0.4s;
    }
    [part='knob'] {
      position: absolute;
      display: inline-block;
      content: '';
      height: var(--circle-height);
      width: var(--circle-width);
      left: var(--circle-top);
      top: var(--circle-top);
      background-color: white;
      -webkit-transition: 0.4s;
      transition: 0.4s;
      border-radius: 50%;
    }
    input:checked + [part='switch'] {
      background-color: #2196f3;
    }
    input:focus + [part='switch'] {
      box-shadow: 0 0 1px #2196f3;
    }
    input:checked + [part='switch'] [part='knob'] {
      transform: translateX(var(--circle-translate-x));
    }
  `;
let s = c;
b([
  d({ type: Boolean })
], s.prototype, "toggled");
customElements.get("frc-toggle-switch") || customElements.define("frc-toggle-switch", s);
export {
  s as ToggleSwitch,
  s as default,
  w as toggleSwitchDashboardConfig
};
