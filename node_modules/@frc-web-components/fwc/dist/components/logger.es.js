import { r as S, i as b, x as C, n as r } from "../property-C4BPH-wS.js";
const n = {
  info: {
    color: "#fff",
    name: "INFO",
    level: 1
  },
  debug: {
    color: "#fff",
    name: "DEBUG",
    level: 0
  },
  fatal: {
    color: "#FF3E3E",
    name: "ERROR",
    level: 4
  },
  warning: {
    color: "#FFC53E",
    name: "WARNING",
    level: 3
  },
  success: {
    color: "#3EFF45",
    name: "SUCCESS",
    level: 2
  }
}, E = {
  name: "Html Logger",
  enabled: !0,
  maxLogCount: 1e3,
  loggingFormat: "[MESSAGE]",
  //"[LEVEL] [MESSAGE]",
  argumentsSeparator: " ",
  utcTime: !1,
  level: 0
};
var x = function(e) {
  var t = [].slice.call(arguments, 1);
  return t.forEach(function(l) {
    for (var i in l)
      e[i] = l[i];
  }), e;
};
class w {
  constructor(e, t = document.body) {
    this.options = x({}, E, e || {}), this.parent = t, this.linesCount = 0, this.$ = {}, this.initialized = !1;
  }
  init() {
    if (this.initialized) return;
    if (!document || !document.createElement || !document.body || !document.body.appendChild)
      throw new Error("HtmlLogger not initialized");
    this.$.container = document.createElement("div"), this.$.container.setAttribute("style", `width:100%; height: 100%;
					margin:0;
					left:0;
					background: rgba(0, 0, 0, 0.8);
					overflow:auto;
					padding: 5px 7px;
    			box-sizing: border-box;`), this.$.log = document.createElement("div");
    const t = document.createElement("span");
    t.style.color = "#afa", t.style.fontWeight = "bold";
    const l = `===== ${this.options.name} - Logger started at ${this.options.utcTime ? (/* @__PURE__ */ new Date()).toUTCString() : /* @__PURE__ */ new Date()} =====`;
    t.appendChild(document.createTextNode(l));
    const i = document.createElement("div");
    i.appendChild(t), i.appendChild(document.createElement("br")), i.appendChild(document.createElement("br")), this.$.container.appendChild(i), this.$.container.appendChild(this.$.log), this.parent.appendChild(this.$.container), this.initialized = !0;
  }
  setLevel(e) {
    this.options.level = e;
  }
  setEnable(e = !0) {
    this.initialized && (this.options.enabled = e, this.$.log.style.color = e ? "#fff" : "#444");
  }
  /**
   * Removes all lines from the view
   * @memberOf HtmlLogger
   */
  clean() {
    if (this.initialized) {
      for (; this.$.log.firstChild; )
        this.$.log.removeChild(this.$.log.firstChild);
      this.linesCount = 0;
    }
  }
  /**
   * prints message. default level is [info].
   * @param {String} msg - message to print
   * @param {String} [hexColor=levels.info.color] - hexcolor text
   * @param {String} [level=levels.info.name] - level suffix
   *
   * @memberOf HtmlLogger
   */
  print(e, t = n.info.color, l = n.info.name) {
    if (!this.initialized || !this.options.enabled) return;
    const i = this.$.container.scrollTop > this.$.container.scrollHeight - this.$.container.clientHeight - 5, a = (e.length ? e : "[empty]").split(/\r\n|\r|\n/);
    for (let p = 0; p < a.length; p++) {
      let c = document.createElement("div");
      c.setAttribute("style", "color:#999;float:left;");
      let y = this._getTime();
      c.appendChild(document.createTextNode(`${y}Â `));
      let v = this.options.loggingFormat.replace("[LEVEL]", l).replace("[MESSAGE]", a[p]), u = document.createElement("div");
      u.setAttribute(
        "style",
        `word-wrap:break-word;margin-left:6.0em;color: ${t}`
      ), u.appendChild(document.createTextNode(v));
      let f = document.createElement("div");
      f.setAttribute("style", "clear:both;");
      var h = document.createElement("div");
      for (h.appendChild(c), h.appendChild(u), h.appendChild(f), this.$.log.appendChild(h), this.linesCount++; this.linesCount > this.options.maxLogCount; )
        this.$.log.childNodes[0].remove(), this.linesCount--;
      i && (this.$.container.scrollTop = this.$.container.scrollHeight);
    }
  }
  info() {
    this.options.level <= n.info.level && this.print(
      [].map.call(arguments, this._determineString).join(this.options.argumentsSeparator)
    );
  }
  debug() {
    this.options.level <= n.debug.level && this.print(
      [].map.call(arguments, this._determineString).join(this.options.argumentsSeparator),
      n.debug.color,
      n.debug.name
    );
  }
  warning() {
    this.options.level <= n.warning.level && this.print(
      [].map.call(arguments, this._determineString).join(this.options.argumentsSeparator),
      n.warning.color,
      n.warning.name
    );
  }
  success() {
    this.options.level <= n.success.level && this.print(
      [].map.call(arguments, this._determineString).join(this.options.argumentsSeparator),
      n.success.color,
      n.success.name
    );
  }
  error() {
    this.options.level <= n.fatal.level && this.print(
      [].map.call(arguments, this._determineString).join(this.options.argumentsSeparator),
      n.fatal.color,
      n.fatal.name
    );
  }
  _getTime() {
    return (this.options.utcTime ? (/* @__PURE__ */ new Date()).toUTCString() : (/* @__PURE__ */ new Date()).toString()).match(/([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]/)[0];
  }
  _determineString(e) {
    if (e === void 0) return "undefined";
    if (e === null) return "null";
    if (e instanceof Array) return JSON.stringify(e);
    switch (typeof e) {
      default:
      case "object":
        return `${e.constructor ? e.constructor.name : e.toString()} -> ${JSON.stringify(e)}`;
      case "function":
        return e.name || "[function]";
      case "number":
      case "string":
      case "boolean":
        return e;
    }
  }
}
var $ = Object.defineProperty, s = (d, e, t, l) => {
  for (var i = void 0, g = d.length - 1, a; g >= 0; g--)
    (a = d[g]) && (i = a(e, t, i) || i);
  return i && $(e, t, i), i;
};
const T = {
  dashboard: {
    displayName: "Logger"
  },
  properties: {
    title: { type: "String", defaultValue: "Robot Logger" },
    maxLogCount: {
      type: "Number",
      attribute: "max-log-count",
      defaultValue: 1e3
    },
    debug: { type: "String" },
    info: { type: "String", primary: !0 },
    success: { type: "String" },
    warning: { type: "String" },
    error: { type: "String" },
    level: {
      type: "String",
      defaultValue: "info",
      input: {
        type: "StringDropdown",
        allowCustomValues: !1,
        getOptions() {
          return ["debug", "info", "success", "warning", "error"];
        }
      }
    },
    disabled: { type: "Boolean" }
  }
}, m = class m extends S {
  constructor() {
    super(...arguments), this.title = "Robot Logger", this.maxLogCount = 1e3, this.debug = "", this.info = "", this.success = "", this.warning = "", this.error = "", this.level = "info", this.disabled = !1, this.levels = ["debug", "info", "success", "warning", "error"];
  }
  firstUpdated() {
    const e = this.renderRoot.querySelector(
      "[part=logger]"
    );
    this.logger = new w(
      {
        name: this.title,
        maxLogCount: Math.max(0, this.maxLogCount),
        level: this.levels.indexOf(this.level),
        enabled: !this.disabled
      },
      e
    ), this.logger.init();
  }
  updated(e) {
    this.levels.forEach((t) => {
      e.has(t) && this[t] && this.logger[t](this[t]);
    }), e.has("maxLogCount") && (this.logger.options.maxLogCount = Math.max(0, this.maxLogCount)), e.has("level") && this.logger.setLevel(this.levels.indexOf(this.level)), e.has("disabled") && this.logger.setEnable(!this.disabled);
  }
  render() {
    return C` <div part="logger"></div> `;
  }
};
m.styles = b`
    :host {
      display: inline-block;
      width: 500px;
      height: 400px;
      font-family: monospace;
      font-size: 14px;
    }

    [part='logger'] {
      width: 100%;
      height: 100%;
    }
  `;
let o = m;
s([
  r({ type: String })
], o.prototype, "title");
s([
  r({ type: Number, attribute: "max-log-count" })
], o.prototype, "maxLogCount");
s([
  r({ type: String })
], o.prototype, "debug");
s([
  r({ type: String })
], o.prototype, "info");
s([
  r({ type: String })
], o.prototype, "success");
s([
  r({ type: String })
], o.prototype, "warning");
s([
  r({ type: String })
], o.prototype, "error");
s([
  r({ type: String })
], o.prototype, "level");
s([
  r({ type: Boolean })
], o.prototype, "disabled");
customElements.get("frc-logger") || customElements.define("frc-logger", o);
export {
  o as default,
  T as loggerDashboardConfig
};
