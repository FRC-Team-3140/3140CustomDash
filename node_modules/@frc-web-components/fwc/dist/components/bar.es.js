import { r as h, i as f, x as m, n as u } from "../property-C4BPH-wS.js";
import { r as c } from "../state-Cn3aen3G.js";
import { e as b } from "../query-BrpQj_Qi.js";
var y = Object.defineProperty, v = Object.getOwnPropertyDescriptor, n = (d, t, e, o) => {
  for (var s = o > 1 ? void 0 : o ? v(t, e) : t, r = d.length - 1, i; r >= 0; r--)
    (i = d[r]) && (s = (o ? i(t, e, s) : i(s)) || s);
  return o && s && y(t, e, s), s;
};
const _ = {
  dashboard: {
    topLevel: !1,
    displayName: "Bar"
  },
  properties: {
    value: { type: "Number" },
    min: { type: "Number", defaultValue: -1 },
    max: { type: "Number", defaultValue: 1 },
    center: { type: "Number" }
  }
};
function g(d, t, e) {
  return Math.min(e, Math.max(d, t));
}
const l = class l extends h {
  constructor() {
    super(...arguments), this._min = -1, this._max = 1, this.value = 0, this.center = 0, this.dragging = !1;
  }
  get min() {
    return Math.min(this._min, this._max);
  }
  set min(t) {
    const e = this._min;
    this._min = t, this.requestUpdate("min", e);
  }
  get max() {
    return Math.max(this._min, this._max);
  }
  set max(t) {
    const e = this._max;
    this._max = t, this.requestUpdate("max", e);
  }
  updateForeground() {
    const { min: t, max: e, center: o, value: s, foreground: r } = this, i = g(s, t, e);
    e < o ? (r.style.setProperty(
      "--foreground-width",
      `${Math.abs(i - e) / (e - t) * 100}%`
    ), r.style.setProperty("--foreground-left", "auto"), r.style.setProperty("--foreground-right", "0")) : t > o ? (r.style.setProperty(
      "--foreground-width",
      `${Math.abs(i - t) / (e - t) * 100}%`
    ), r.style.setProperty("--foreground-left", "0"), r.style.setProperty("--foreground-right", "auto")) : i > o ? (r.style.setProperty(
      "--foreground-width",
      `${Math.abs(i - o) / (e - t) * 100}%`
    ), r.style.setProperty(
      "--foreground-left",
      `${Math.abs(t - o) / (e - t) * 100}%`
    ), r.style.setProperty("--foreground-right", "auto")) : (r.style.setProperty(
      "--foreground-width",
      `${Math.abs(i - o) / (e - t) * 100}%`
    ), r.style.setProperty("--foreground-left", "auto"), r.style.setProperty(
      "--foreground-right",
      `${Math.abs(e - o) / (e - t) * 100}%`
    ));
  }
  resized() {
    this.updateForeground();
  }
  updated() {
    this.updateForeground();
  }
  setDragPosition(t) {
    const { left: e, width: o } = this.getBoundingClientRect(), s = t.clientX - e, r = g(s / o, 0, 1), i = this.min + (this.max - this.min) * r, p = new CustomEvent("barDrag", {
      bubbles: !0,
      composed: !0,
      detail: { value: i }
    });
    this.dispatchEvent(p);
  }
  firstUpdated() {
    this.setAttribute("draggable", "false"), window.addEventListener("mousemove", (t) => {
      this.dragging && this.setDragPosition(t);
    }), window.addEventListener("mouseup", () => {
      this.dragging = !1;
    });
  }
  onMouseDown(t) {
    this.dragging = !0, this.setDragPosition(t);
  }
  render() {
    return m`
      <div part="foreground" draggble="false"></div>
      <div class="content" draggable="false">
        <slot></slot>
      </div>
      <div part="dragger" @mousedown="${this.onMouseDown}"></div>
    `;
  }
};
l.styles = f`
    :host {
      display: inline-block;
      position: relative;
      width: 300px;
      height: 20px;
      background: var(--frc-bar-background, #ddd);
      color: var(--frc-bar-color, black);
      font-size: 15px;
      line-height: 18px;
      text-align: center;
    }

    [part='dragger'] {
      position: absolute;
      top: 0;
      height: 100%;
      width: 100%;
    }

    [part='foreground'] {
      position: absolute;
      top: 0;
      height: 100%;
      background: var(--frc-bar-foreground, lightblue);
      border-radius: 3px;
      width: var(--foreground-width);
      left: var(--foreground-left);
      right: var(--foreground-right);
      pointer-events: none;
    }

    .content {
      position: relative;
    }
  `;
let a = l;
n([
  u({ type: Number })
], a.prototype, "value", 2);
n([
  u({ type: Number })
], a.prototype, "center", 2);
n([
  c()
], a.prototype, "dragging", 2);
n([
  u({ type: Number })
], a.prototype, "min", 1);
n([
  u({ type: Number })
], a.prototype, "max", 1);
n([
  b("[part=foreground]")
], a.prototype, "foreground", 2);
customElements.get("frc-bar") || customElements.define("frc-bar", a);
export {
  a as Bar,
  _ as barDashboardConfig,
  a as default
};
