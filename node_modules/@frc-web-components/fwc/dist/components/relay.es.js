var p = (e) => {
  throw TypeError(e);
};
var h = (e, t, r) => t.has(e) || p("Cannot " + r);
var u = (e, t, r) => t.has(e) ? p("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(e) : t.set(e, r);
var f = (e, t, r) => (h(e, t, "access private method"), r);
import { r as v, i as y, x as m, n as d } from "../property-C4BPH-wS.js";
import "./toggle-group.es.js";
var O = Object.defineProperty, c = (e, t, r, x) => {
  for (var i = void 0, a = e.length - 1, l; a >= 0; a--)
    (l = e[a]) && (i = l(t, r, i) || i);
  return i && O(t, r, i), i;
};
const _ = {
  dashboard: {
    displayName: "Relay"
  },
  properties: {
    value: {
      type: "String",
      defaultValue: "Off",
      reflect: !0,
      primary: !0,
      input: {
        type: "StringDropdown",
        allowCustomValues: !1,
        getOptions() {
          return ["Off", "On", "Forward", "Reverse"];
        }
      }
    }
  }
}, w = ["Off", "On", "Forward", "Reverse"];
var s, g;
const n = class n extends v {
  constructor() {
    super(...arguments);
    u(this, s);
    this.value = "Off", this.direction = "vertical";
  }
  render() {
    return m`
      <frc-toggle-group
        @change=${f(this, s, g)}
        .options=${w}
        value=${this.value}
        direction=${this.direction}
      ></frc-toggle-group>
    `;
  }
};
s = new WeakSet(), g = function(r) {
  this.value = r.detail.value;
}, n.styles = y`
    :host {
      display: inline-block;
      width: 150px;
      height: 300px;
    }

    frc-toggle-group {
      width: 100%;
      height: 100%;
    }
  `;
let o = n;
c([
  d({ type: String })
], o.prototype, "value");
c([
  d({ type: String })
], o.prototype, "direction");
customElements.get("frc-relay") || customElements.define("frc-relay", o);
export {
  o as Relay,
  o as default,
  _ as relayDashboardConfig
};
