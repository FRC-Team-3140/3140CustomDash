var f = (t) => {
  throw TypeError(t);
};
var C = (t, e, a) => e.has(t) || f("Cannot " + a);
var b = (t, e, a) => e.has(t) ? f("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, a);
var g = (t, e, a) => (C(t, e, "access private method"), a);
import { r as y, i as v, x as d, n } from "../property-C4BPH-wS.js";
import "./toggle-button.es.js";
var $ = Object.defineProperty, u = (t, e, a, S) => {
  for (var o = void 0, l = t.length - 1, m; l >= 0; l--)
    (m = t[l]) && (o = m(e, a, o) || o);
  return o && $(e, a, o), o;
};
const P = {
  dashboard: {
    displayName: "Command"
  },
  properties: {
    name: { type: "String", defaultValue: "Command" },
    running: { type: "Boolean", changeEvent: "toggle" },
    controllable: { type: "Boolean" },
    label: { type: "String" }
  }
};
var h, x;
const c = class c extends y {
  constructor() {
    super(...arguments);
    b(this, h);
    this.name = "Command", this.running = !1, this.controllable = !1, this.label = "";
  }
  render() {
    return d`
      <frc-toggle-button
        ?disabled="${!this.controllable}"
        ?toggled="${this.running}"
        label=${this.label || this.name}
        @toggle="${g(this, h, x)}"
      >
      </frc-toggle-button>
    `;
  }
};
h = new WeakSet(), x = function(a) {
  a.stopPropagation(), this.running = !this.running, this.dispatchEvent(
    new CustomEvent("toggle", {
      detail: {
        running: this.running
      },
      bubbles: !0,
      composed: !0
    })
  );
}, c.styles = v`
    :host {
      display: inline-block;
      width: 100px;
      height: 50px;
      font-family: sans-serif;
      font-size: 16px;
      letter-spacing: 0.5px;
    }

    frc-toggle-button {
      width: 100%;
      height: 100%;
    }
  `;
let i = c;
u([
  n({ type: String })
], i.prototype, "name");
u([
  n({ type: Boolean })
], i.prototype, "running");
u([
  n({ type: Boolean })
], i.prototype, "controllable");
u([
  n({ type: String })
], i.prototype, "label");
customElements.get("frc-robot-command") || customElements.define("frc-robot-command", i);
var B = Object.defineProperty, p = (t, e, a, S) => {
  for (var o = void 0, l = t.length - 1, m; l >= 0; l--)
    (m = t[l]) && (o = m(e, a, o) || o);
  return o && B(e, a, o), o;
};
const _ = {
  dashboard: {
    displayName: "Subsystem"
  },
  properties: {
    default: { type: "String" },
    command: { type: "String" },
    hasCommand: { type: "Boolean", attribute: "has-command" },
    hasDefault: { type: "Boolean", attribute: "has-default" },
    label: { type: "String" },
    name: { type: "String" },
    hideName: { type: "Boolean", attribute: "hide-name" }
  }
};
var s;
const r = (s = class extends y {
  constructor() {
    super(...arguments), this.default = "", this.command = "", this.hasCommand = !1, this.hasDefault = !1, this.label = "", this.name = "", this.hideName = !1;
  }
  static renderValue(e, a) {
    return a ? d`<span class="has-value">${e}</span>` : d`<span class="no-value">None</span>`;
  }
  render() {
    return d`
      ${this.hideName ? "" : d` <header>${this.label || this.name}</header> `}
      <div class="subsystem">
        <p>
          Default command:
          ${s.renderValue(this.default, this.hasDefault)}
        </p>
        <p>
          Current command:
          ${s.renderValue(this.command, this.hasCommand)}
        </p>
      </div>
    `;
  }
}, s.styles = v`
    :host {
      display: inline-block;
      font-family: sans-serif;
      font-size: 16px;
      padding: 5px;
      color: var(--frc-label-text-color, black);
    }

    .subsystem {
      display: flex;
      flex-direction: column;
      flex-wrap: wrap;
    }

    p {
      margin: 0;
      margin-right: 10px;
      margin-top: 5px;
    }

    header {
      font-weight: bold;
      margin-bottom: 2px;
      color: var(--frc-robot-subsystem-header-color, purple);
    }

    .has-value {
      color: green;
    }

    .no-value {
      color: red;
    }
  `, s);
p([
  n({ type: String })
], r.prototype, "default");
p([
  n({ type: String })
], r.prototype, "command");
p([
  n({ type: Boolean, attribute: "has-command" })
], r.prototype, "hasCommand");
p([
  n({ type: Boolean, attribute: "has-default" })
], r.prototype, "hasDefault");
p([
  n({ type: String })
], r.prototype, "label");
p([
  n({ type: String })
], r.prototype, "name");
p([
  n({ type: Boolean, attribute: "hide-name" })
], r.prototype, "hideName");
let D = r;
customElements.get("frc-robot-subsystem") || customElements.define("frc-robot-subsystem", D);
export {
  i as RobotCommand,
  D as RobotSubsystem,
  P as robotCommandDashboardConfig,
  _ as robotSubsystemDashboardConfig
};
