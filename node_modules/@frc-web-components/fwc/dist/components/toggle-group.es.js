var d = (e) => {
  throw TypeError(e);
};
var b = (e, i, t) => i.has(e) || d("Cannot " + t);
var h = (e, i, t) => i.has(e) ? d("Cannot add the same private member more than once") : i instanceof WeakSet ? i.add(e) : i.set(e, t);
var a = (e, i, t) => (b(e, i, "access private method"), t);
import { r as y, i as m, x as g, n as l } from "../property-C4BPH-wS.js";
var x = Object.defineProperty, p = (e, i, t, w) => {
  for (var o = void 0, s = e.length - 1, c; s >= 0; s--)
    (c = e[s]) && (o = c(i, t, o) || o);
  return o && x(i, t, o), o;
};
const k = {
  dashboard: {
    displayName: "Toggle Group"
  },
  properties: {
    options: {
      type: "Array",
      changeEvent: "optionsUpdate",
      defaultValue: ["On", "Off"],
      input: { type: "StringArray" }
    },
    value: {
      primary: !0,
      type: "String",
      changeEvent: "change",
      input: {
        type: "StringDropdown",
        allowCustomValues: !1,
        getOptions({ options: e }) {
          return e;
        }
      }
    },
    direction: {
      type: "String",
      defaultValue: "vertical",
      input: {
        type: "StringDropdown",
        allowCustomValues: !1,
        getOptions() {
          return ["vertical", "horizontal"];
        }
      }
    }
  }
};
var n, f, v;
const u = class u extends y {
  constructor() {
    super(...arguments);
    h(this, n);
    this.options = ["On", "Off"], this.value = "", this.direction = "vertical";
  }
  async setValue(t) {
    this.value = t;
  }
  updated(t) {
    t.has("options") && !this.options.includes(this.value) && (this.value = this.options[0] ?? ""), t.has("value") && a(this, n, f).call(this), t.has("options") && a(this, n, v).call(this), t.has("direction") && this.style.setProperty(
      "flex-direction",
      this.direction === "vertical" ? "column" : "row"
    );
  }
  render() {
    return g`
      ${this.options.map(
      (t) => g`
          <button
            class="${this.value === t ? "toggled" : ""}"
            @click="${() => this.setValue(t)}"
          >
            ${t}
          </button>
        `
    )}
    `;
  }
};
n = new WeakSet(), f = function() {
  this.dispatchEvent(
    new CustomEvent("change", {
      detail: { value: this.value },
      bubbles: !0,
      composed: !0
    })
  );
}, v = function() {
  this.dispatchEvent(
    new CustomEvent("optionsUpdate", {
      detail: { options: this.options },
      bubbles: !0,
      composed: !0
    })
  );
}, u.styles = m`
    :host {
      display: inline-flex;
      flex-direction: column;
      width: 150px;
      height: 300px;
      gap: 0;
      font-family: sans-serif;
      font-size: 16px;
      letter-spacing: 0.5px;
    }

    button {
      width: 100%;
      height: 100%;
      margin: 0;
      border: none;
      font-size: inherit;
      font-family: inherit;
      letter-spacing: inherit;
      background: var(--frc-button-background-color, rgb(230, 230, 230));
      color: var(--frc-button-text-color, black);
      flex: 1;
    }

    .toggled {
      background: var(--frc-button-toggled-background-color, black);
      color: var(--frc-button-toggled-text-color, white);
      font-weight: bold;
    }

    [part='button'] {
      border-radius: 0;
      margin: 0;
      flex: 1;
      font-size: inherit;
      height: 100%;
      padding: 0;
    }
  `;
let r = u;
p([
  l({ type: Array })
], r.prototype, "options");
p([
  l({ type: String })
], r.prototype, "value");
p([
  l({ type: String })
], r.prototype, "direction");
customElements.get("frc-toggle-group") || customElements.define("frc-toggle-group", r);
export {
  r as ToggleGroup,
  r as default,
  k as toggleGroupDashboardConfig
};
