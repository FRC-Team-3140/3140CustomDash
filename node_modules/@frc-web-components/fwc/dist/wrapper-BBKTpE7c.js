import { r as y, i as b, b as u, n as d, x as M } from "./property-C4BPH-wS.js";
import { r as v } from "./state-Cn3aen3G.js";
import { e as $ } from "./query-BrpQj_Qi.js";
var k = Object.defineProperty, c = (i, e, r, n) => {
  for (var t = void 0, s = i.length - 1, o; s >= 0; s--)
    (o = i[s]) && (t = o(e, r, t) || t);
  return t && k(e, r, t), t;
};
function C(i) {
  const e = (i == null ? void 0 : i.getChildren()) ?? {};
  return Object.values(e).filter(
    (t) => {
      var s;
      return t.hasChildren() && ((s = t.getChildren()[".type"]) == null ? void 0 : s.getSourceValue()) === "line";
    }
  ).map((t) => {
    const s = t.getChildren();
    return {
      angle: s.angle.getSourceValue() ?? 0,
      color: s.color.getSourceValue() ?? "#ffffff",
      length: s.length.getSourceValue() ?? 1,
      weight: s.weight.getSourceValue() ?? 1,
      children: C(t)
    };
  });
}
function w(i) {
  const e = (i == null ? void 0 : i.getChildren()) ?? {};
  return Object.values(e).filter(
    (t) => t.hasChildren()
  ).map((t) => ({
    x: t.getChildren().x.getSourceValue() ?? 0,
    y: t.getChildren().y.getSourceValue() ?? 0,
    children: C(t)
  }));
}
const p = class p extends y {
  constructor() {
    super(...arguments), this.backgroundColor = "#000020", this.dims = [3, 3], this.roots = [], this.mechanism2d = this.getMechanism2d();
  }
  firstUpdated() {
    new ResizeObserver(() => {
      this.resized();
    }).observe(this), requestAnimationFrame(() => {
      this.updateMechanism2d();
    });
  }
  getMech2dSize() {
    const { width: e, height: r } = this.getBoundingClientRect(), [n, t] = this.dims;
    return t / n * e < r ? [e, t / n * e] : [n / t * r, r];
  }
  resized() {
    this.requestUpdate();
  }
  getSize() {
    const { width: e } = this.getBoundingClientRect();
    return e;
  }
  updated(e) {
    e.has("backgroundColor") && this._svg.style.setProperty("background-color", this.backgroundColor), e.has("dims") && this.requestUpdate();
  }
  updateMechanism2d() {
    this.mechanism2d = this.getMechanism2d(), requestAnimationFrame(() => {
      this.updateMechanism2d();
    });
  }
  getMechanism2d() {
    return {
      backgroundColor: this.backgroundColor,
      dims: this.dims,
      roots: this.roots
    };
  }
  render() {
    const [e, r] = this.getMech2dSize();
    return u`
      <svg
        style="width: ${e}px; height: ${r}px; background: ${this.mechanism2d.backgroundColor}"
      >
        ${this.mechanism2d.roots.map(
      (n) => this.renderMechanism2dRoot(n)
    )}
      </svg>
    `;
  }
  renderMechanism2dRoot(e) {
    const [r, n] = this.dims, [t, s] = this.getMech2dSize(), o = e.x / r * t, l = e.y / n * s;
    return u`
      <g style="transform: translate(${o}px, ${s - l}px)">
        ${e.children.map((g) => this.renderMechanism2dLine(g))}
      </g>
    `;
  }
  renderMechanism2dLine(e) {
    const [r] = this.dims, [n] = this.getMech2dSize(), t = n / r * e.length, s = e.angle * Math.PI / 180, o = Math.cos(s) * t, l = -Math.sin(s) * t, g = Math.max(1, e.weight * 2 / 3);
    return u`
      <line stroke=${e.color} stroke-width=${g} x1="0" y1="0" x2="${o}px" y2="${l}px"  />
      <g style="transform: translate(${o}px, ${l}px) rotate(${-e.angle}deg)">
        ${e.children.map((x) => this.renderMechanism2dLine(x))}
      </g>
    `;
  }
};
p.styles = b`
    :host {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      position: relative;
      width: 300px;
      height: 300px;
    }

    svg {
      width: 100%;
      height: 100%;
    }
  `;
let h = p;
c([
  d({ type: String, attribute: "background-color" })
], h.prototype, "backgroundColor");
c([
  d({ type: Array })
], h.prototype, "dims");
c([
  d({ type: Array })
], h.prototype, "roots");
c([
  $("svg")
], h.prototype, "_svg");
c([
  v()
], h.prototype, "mechanism2d");
customElements.get("frc-mechanism2d") || customElements.define("frc-mechanism2d", h);
var S = Object.defineProperty, m = (i, e, r, n) => {
  for (var t = void 0, s = i.length - 1, o; s >= 0; s--)
    (o = i[s]) && (t = o(e, r, t) || t);
  return t && S(e, r, t), t;
};
const O = {
  dashboard: {
    displayName: "Mechanism2d"
  },
  properties: {
    backgroundColor: {
      type: "String",
      attribute: "background-color",
      defaultValue: "#000020",
      input: { type: "ColorPicker" }
    },
    dims: {
      type: "Array",
      defaultValue: [3, 3],
      input: { type: "NumberArray" }
    },
    source: { type: "Source", primary: !0, input: { type: "None" } }
  }
}, f = class f extends y {
  constructor() {
    super(...arguments), this.backgroundColor = "#000020", this.dims = [3, 3], this.roots = [];
  }
  updateMechanism2d() {
    this.roots = this.source ? w(this.source) : [], requestAnimationFrame(() => {
      this.updateMechanism2d();
    });
  }
  firstUpdated() {
    this.updateMechanism2d();
  }
  render() {
    return M`
      <frc-mechanism2d
        .roots=${this.roots}
        .backgroundColor=${this.backgroundColor}
        .dims=${this.dims}
      ></frc-mechanism2d>
    `;
  }
};
f.styles = b`
    :host {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      position: relative;
      width: 300px;
      height: 300px;
    }

    frc-mechanism2d {
      width: 100%;
      height: 100%;
    }
  `;
let a = f;
m([
  d({ type: String, attribute: "background-color" })
], a.prototype, "backgroundColor");
m([
  d({ type: Array })
], a.prototype, "dims");
m([
  d({ type: Object })
], a.prototype, "source");
m([
  v()
], a.prototype, "roots");
customElements.get("frc-mechanism2d-wrapper") || customElements.define("frc-mechanism2d-wrapper", a);
export {
  h as M,
  w as a,
  a as b,
  C as g,
  O as m
};
